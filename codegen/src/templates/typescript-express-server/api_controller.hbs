import {Application, Request, Response, NextFunction} from 'express';
import {Controller, Get, Post, Put, Delete, Validator} from '../baseController';
import { {{~fpc tag}}Service, Container} from './{{tag}}.service';
import * as {{tag}}Params from './{{tag}}.parameters';
import * as validSchemas from './{{tag}}.validator';

const serviceInstance = Container.get({{fpc tag}}Service);

@Controller('')
export class {{fpc tag}}Controller {
  constructor(private app: Application) {}

  {{#each data.paths as |path|}}
    {{#each path as |data|}}
      {{#if (equal ../../tag data.tags.0) }}
  @{{fpc @key}}('{{~path_parameter_format @../key}}')
  @Validator(validSchemas.{{data.operationId}}Validator)
  async {{data.operationId}}(
      req: Request,
      res: Response,
      next: NextFunction,
  ) {
    serviceInstance.{{data.operationId}}(
        {{../../tag}}Params.{{fpc data.operationId}}RequestConvert(
            req.body,
            req.query,
            req.params,
        ),
    )
        .then((result) =>{
    {{#if (equal (model_type data.operationId) "custom")  }}
          // custom begin {{data.operationId}}
{{{lookup ../../custom data.operationId }}}
          // custom end {{data.operationId}}
    {{else}}
          res.json(result);
    {{/if}}
        }).catch((e) => {
          next(e);
        });
  }
      {{/if }}
    {{/each}}
  {{/each}}
}
