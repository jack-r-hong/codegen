import {Response, NextFunction} from 'express';
import {Inject, Service, Container} from 'typedi';
import {
  Controller,
  httpMethods,
  middlewareDecorator,
  ControllerToken,
  AppUse,
} from '../baseController';
import { {{~fpc tag}}Service} from './{{tag}}.service';
import * as {{tag}}Params from './{{tag}}.parameters';
import * as validSchemas from './{{tag}}.validator';

// eslint-disable-next-line no-unused-vars
const {Get, Post, Put, Delete} = httpMethods;
// eslint-disable-next-line no-unused-vars
const {Validator, FormData, limiter} = middlewareDecorator;

@Service({id: ControllerToken, multiple: true})
export class {{fpc tag}}Controller implements Controller {
  constructor() {}

  static service = Container.get({{fpc tag}}Service);
  @Inject('app.use')
    appUse!: AppUse;

  {{#each data.paths as |path|}}
    {{#each path as |data|}}
      {{#if (equal ../../tag data.tags.0) }}
  @{{fpc @key}}('{{~path_parameter_format @../key}}')
  @Validator(validSchemas.{{data.operationId}}Validator)
  {{#if (equal (model_type data.operationId) "uploadMany")  }}
  @FormData()
  {{/if}}
  async {{data.operationId}}(
      req: {{../../tag}}Params.{{fpc data.operationId}}Request,
      res: Response,
      next: NextFunction,
  ) {
    // custom begin {{data.operationId}}Check
{{{lookup ../../custom  (add data.operationId "Check")}}}
    // custom end {{data.operationId}}Check
    {{fpc ../../tag}}Controller.service.{{data.operationId}}(
        {{../../tag}}Params.{{fpc data.operationId}}RequestConvert(
            req.body,
            req.query,
            req.params,
            req.cookies,
        ),
        req.session,
        {{#if (equal (model_type data.operationId) "uploadMany")  }}
        req.files as Express.Multer.File[],
        {{/if}}
    )
        .then((result) =>{
    {{#if (equal (model_type data.operationId) "custom")  }}
          // custom begin {{data.operationId}}
{{{lookup ../../custom data.operationId }}}
          // custom end {{data.operationId}}
    {{else}}
          res.json(result);
    {{/if}}
        }).catch((e) => {
          next(e);
        });
  }
      {{/if }}
    {{/each}}
  {{/each}}
}
