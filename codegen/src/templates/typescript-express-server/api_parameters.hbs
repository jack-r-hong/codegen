import {Request} from 'express';
import {Query, ParamsDictionary} from 'express-serve-static-core';

interface TypedRequest<
  T,
  U extends Query,
  P extends ParamsDictionary
> extends Request {
  body: T,
  query: U,
  params: P,
}

{{~#each data.paths as |path|}}
{{#each path as |data|}}
  {{!-- filler tag --}}
  {{#if (equal ../../tag data.tags.0) }}
    type {{fpc data.operationId}}ReqBody = {
      {{#each data.requestBody.content.[application/json].schema.properties as |p|}}
        {{#if (equal p.type "array") }}
          {{ @key}}: {
              {{#each p.items.properties as i}}
                {{#if (equal p.type "integer") }}
                  {{ @key}}: string,
                {{else}}
                  {{ @key}}: string,
                {{/if}}
              {{/each}} 
          }[]
        {{~else~}}
          {{ @key}}: string
        {{~/if~}}        
        {{~#if p.nullable }}
          | null
        {{~else~}}
        {{~/if~}}  
        , 
      {{/each}}      
    }

    type {{fpc data.operationId}}ReqQuery = {
    {{#each data.parameters as |p|}}
      {{#if (equal p.in "query") }}
        {{#if (equal p.schema.type "array") }}
          {{ p.name}}: string[]
        {{else}}
          {{ p.name}}: string
        {{/if}}
      {{else}}
      {{/if}}
    {{/each}}
    }

    type {{fpc data.operationId}}ReqParams = {
    {{#each data.parameters as |p|}}
      {{#if (equal p.in "path") }}
        {{#if (equal p.schema.type "array") }}
          {{ p.name}}: string[]
        {{else}}
          {{ p.name}}: string
        {{/if}}
        {{~#if p.nullable }}
          | null
        {{~else~}}
        {{~/if~}}  
        ,   
      {{else}}
      {{/if}}
    {{/each}}
    }

    export interface {{fpc data.operationId}}Request extends TypedRequest<
      {{fpc data.operationId}}ReqBody,
      {{fpc data.operationId}}ReqQuery,
      {{fpc data.operationId}}ReqParams
    >{
    }

    export type {{fpc data.operationId}}Params = {
    {{#each data.parameters as |p|}}
      {{#if (equal p.schema.type "array") }}
        {{p.in}}{{fpc p.name}}: {{parameter_type p.schema.items.type}}[]
      {{else}}
        {{p.in}}{{fpc p.name}}: {{parameter_type p.schema.type}}
      {{/if}}
    {{/each}}
    {{#if data.requestBody.content.[application/json].schema.type}}
      {{#if (equal data.requestBody.content.[application/json].schema.type "object") }}
        {{#each data.requestBody.content.[application/json].schema.properties as |p|}}
          {{#if (equal p.type "array")}}
          body{{fpc @key}}: {
            {{#each p.items.properties as |i|}}
              body{{fpc @key}}: {{parameter_type i.type}}
            {{~#if i.nullable ~}}
              |null
            {{~else~}}
            {{~/if~}}  
            ,
            {{/each}}            
          }[]
          {{~else~}}    
          body{{fpc @key}}: {{parameter_type p.type}}
          {{~/if~}}
          {{~#if p.nullable }}
            | null
          {{~else~}}
          {{~/if~}}
          ,
        {{/each}}
      {{/if}}
      {{#if (equal data.requestBody.content.[application/json].schema.type "array") }}
        {{#each data.requestBody.content.[application/json].schema.items.properties as |p|}}
          body{{fpc @key}}: {{parameter_type p.type}},
        {{/each}}
      {{/if}}
    {{/if}}
    }

    export const {{fpc data.operationId}}RequestConvert = (
    body: {{fpc data.operationId}}ReqBody,
    query: {{fpc data.operationId}}ReqQuery,
    path: {{fpc data.operationId}}ReqParams,
    ): {{fpc data.operationId}}Params => {
      {{!-- body --}}
    {{#if data.requestBody.content.[application/json].schema.type}}
        return {
        {{#each data.parameters as |p|}}
          {{#if (equal p.schema.type "integer") }}
            {{p.in}}{{fpc p.name}}: parseInt({{p.in}}.{{p.name}}),
          {{else}}
            {{p.in}}{{fpc p.name}}: {{p.in}}.{{p.name}},
          {{/if}}
        {{/each}}
        {{#if (equal data.requestBody.content.[application/json].schema.type "object") }}
          {{#each data.requestBody.content.[application/json].schema.properties as |p|}}
            {{#if (equal p.type "array") }}
              body{{fpc @key}}: body.{{ @key}}.map((e :any) => {
                return {
                  {{#each p.items.properties as |i|}}
                    {{#if (equal i.type "integer") }}
                      body{{fpc @key}}: parseInt(e.{{@key}}),
                    {{else}}
                      body{{fpc @key}}: e.{{@key}},
                    {{/if}}
                  {{/each}} 
                };
              }),
            {{else}}
              {{#if (equal p.type "integer") }}
                body{{fpc @key}}: parseInt(body.{{@key}}),
              {{else}}
                body{{fpc @key}}: body.{{@key}},
              {{/if}}
            {{/if}}        
          {{/each}}
        {{/if}}
        };
    {{else}}
    {{!-- params --}}
      return {
      {{#each data.parameters as |p|}}
        {{#if (equal p.schema.type "array") }}
          {{#if (equal p.schema.items.type "integer") }}
            {{p.in}}{{fpc p.name}}: typeof {{p.in}}.{{p.name}} === 'string'? 
               [parseInt({{p.in}}.{{p.name}})] :
              {{p.in}}.{{p.name}}.map((e) => parseInt(e)),
          {{else}}
            {{p.in}}{{fpc p.name}}: {{p.in}}.{{ p.name}},
          {{/if}}        
        {{else}}
          {{#if (equal p.schema.type "integer") }}
            {{p.in}}{{fpc p.name}}: parseInt({{p.in}}.{{p.name}}),
          {{else}}
            {{p.in}}{{fpc p.name}}: {{p.in}}.{{p.name}},
          {{/if}}
        {{/if}}    
      {{/each}}
      };
    {{/if}}
    };
  {{/if}}
{{/each}}
{{/each}}


