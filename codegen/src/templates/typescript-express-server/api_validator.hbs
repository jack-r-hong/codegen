// eslint-disable-next-line no-unused-vars
import {Schema, CustomValidator} from 'express-validator';
import * as sessions from '../../sessions';
// custom begin import
{{{lookup ../../custom "import" }}}
// custom end import

{{~#*inline "schema"}}
  {{p.name}}: {
    in: '
        {{~#if (equal p.in "path")~}}
            params
        {{~else~}}
          {{~#if (equal p.in "cookie")~}}
            cookies
          {{~else~}}
            {{p.in}}
          {{/if~}}
        {{/if~}}
        ',
        {{#if p.schema.nullable }}
    optional: {
      options: {
        nullable: true,
      },
    },
        {{/if}}
        {{#if p.schema.nullable }}
    optional: {
      options: {
        nullable: true,
      },
    },
        {{/if}} 
        {{#if (equal p.schema.type "integer") }}
    isInt: true,
        {{/if}}
        {{#if (equal p.schema.type "string") }}
    isString: true,
        {{/if}}
        {{#if p.required }}
    notEmpty: true,
        {{/if}}
        {{#if (equal p.schema.format "email") }}
    isEmail: true,
        {{/if}}
        {{#if (equal p.schema.format "password") }}
    isStrongPassword: true,
        {{/if}} 
        {{#if (equal p.schema.format "phone") }}
    isMobilePhone: true,
        {{/if}} 
        {{#if (equal p.schema.format "date-time") }}
    matches: {
      options: /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
    },
        {{/if}}   
        {{#if p.schema.enum }}
    matches: {
      options: /^(
          {{~#each p.schema.enum as |enum|~}}
            {{~#if (gt @index 0)~}}
            |
            {{~/if~}}
            {{enum}}
          {{~/each~}}
      )/,
    },
        {{/if}} 
  },
{{/inline}}

{{~#*inline "parm"}}
    {{#if (equal p.type "integer") }}
isInt: true,
    {{/if}}
    {{#if (equal p.type "string") }}
isString: true,
    {{/if}}       
    {{#if (equal p.type "array") }}
isArray: true,
    {{/if}}             
    {{#if p.nullable }}
optional: {
  options: {
    nullable: true,
  },
},
    {{/if}} 
    {{#if p.default }}
optional: {
  options: {
    nullable: true,
  },
},
    {{/if}} 
    {{#if p.required }}
notEmpty: true,
    {{/if}}
    {{#if (equal p.format "email") }}
    isEmail: true,
    {{/if}}    
    {{#if (equal p.format "password") }}
isStrongPassword: true,
    {{/if}}         
    {{#if (equal p.format "phone") }}
isMobilePhone: true,
    {{/if}} 
    {{#if (equal p.format "date-time") }}
matches: {
  options: /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
}
    {{/if}} 
    {{#if p.enum }}
    matches: {
      options: /^(
          {{~#each p.enum as |enum|~}}
            {{~#if (gt @index 0)~}}
            |
            {{~/if~}}
            {{enum}}
          {{~/each~}}
      )/,
    },
    {{/if}} 
    {{#if (or p.maxLength p.minLength)}}
    isLength: {
      options: {
          {{#if p.maxLength }}
        max: {{p.maxLength}},
          {{/if}} 
          {{#if p.minLength }}
        min: {{p.minLength}},
          {{/if}} 
      },

    },
    {{/if}}                            
{{/inline}}

{{~#*inline "body"}}
  '{{@key}}': {
    in: 'body',
    {{> parm}}    
  },
{{/inline}}

{{~#*inline "bodyArray"}}
  '{{@../key}}.*.{{@key}}': {
    {{> parm}} 
  },
{{/inline}}




{{#each data.paths as |path|}}
    {{#each path as |d|}}
      {{#if (equal ../../tag d.tags.0) }}
export const {{d.operationId}}Validator: Schema = {
        {{#each d.parameters as |p|}}
          {{#if (equal p.name ../../../data.components.securitySchemes.cookieAuth.name)}}
          {{else}}
            {{~ > schema}}
          {{/if}}
        {{/each}}  
        {{#if d.requestBody.content.[application/json].schema.type}}
          {{#if (equal d.requestBody.content.[application/json].schema.type "object") }}
            {{#each d.requestBody.content.[application/json].schema.properties as |p|}}
              {{~ > body}}
                {{#if (equal p.type "array") }}
                  {{#each p.items.properties as |p|}}
                      {{~> bodyArray}} 
                  {{/each}}
                {{/if}}                      
            {{/each}}
          {{/if}}
        {{/if}} 
        {{#each d.security as |security|}}
          {{#each security as |s|}}
  '{{../../../../data.components.securitySchemes.cookieAuth.name}}': {
    in: 'cookies',
    custom: {
      options: (value, {req, location, path}) => {
        sessions.{{camel_case @key}}SessionVerify(req['session']);
        return true;
      },
    },
    {{!-- customSanitizer: {
      options: (value, {req, location, path}) => {
        try {
          const v = userInfoApiKey.tokenVerify(value);

          if (typeof v == 'object') {
            return v['data'];
          }
        } catch (e) {

        }
      },
    }, --}}
  },
          {{/each}}
        {{/each}}
};
      {{/if}} 
    {{/each}}
{{/each}}
