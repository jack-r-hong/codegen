import {Service} from 'typedi';
import * as Prisma from '@prisma/client';
import * as requestTypes from './{{tag}}.parameters';
import {errors} from '../../errors';

const prisma = new Prisma.PrismaClient();

{{~#*inline "createOne"}}
    const res = await prisma.{{../../tag}}.create({
      data: {
      {{#if d.requestBody.content.[application/json].schema.type}}
        {{#if (equal d.requestBody.content.[application/json].schema.type "object") }}
          {{#each d.requestBody.content.[application/json].schema.properties as |p|}}
        {{@key}}: param.body{{fpc @key}},
          {{/each}}
        {{/if}}
      {{/if}} 
      },
    }).catch((e) => {
      throw e;
    }).finally(() => {
      prisma.$disconnect();
    });
{{/inline}}

{{~#*inline "createMany"}}
    const data = param.bodyDataList.map((e) => {
      return {
        {{#if d.requestBody.content.[application/json].schema.type}}
          {{#if (equal d.requestBody.content.[application/json].schema.type "object") }}
            {{#each d.requestBody.content.[application/json].schema.properties as |p|}}
              {{#each p.items.properties as i}}
        {{@key}}: e.body{{fpc @key}},
              {{/each}} 
            {{/each}}
          {{/if}} 
        {{/if}} 
      };
    });

    const res = await prisma.{{../../tag}}.createMany({
      data,
      skipDuplicates: true,
    }).catch((e) => {
      throw e;
    }).finally(() => {
      prisma.$disconnect();
    });
{{/inline}}

{{~#*inline "readOne"}}
    const res = await prisma.{{../../tag}}.findUnique({
      where: {
        {{#each d.parameters}}
        {{name}}: param.{{in}}{{fpc name}},
        {{/each}}    
        
      },
      select: {
        {{#each d.responses.200.content.[application/json].schema.properties as |v|}}
        {{#if (lookup v "$ref") }}
        {{else}}
        {{@key}}: true,
        {{/if}}
        {{/each}}
        // custom begin {{d.operationId}}
{{{lookup ../../custom d.operationId }}}
        // custom end {{d.operationId}}
      },
    }).catch((e) => {
      throw e;
    }).finally(() => {
      prisma.$disconnect();
    });

    if (res === null) {
      throw new errors.NotFindError;
    }
{{/inline}}

{{~#*inline "JSESSIONID"}}
  {{#if (equal name "JSESSIONID")}}
    ownerId: param.cookieJsessionid,
  {{else}}
    {{name}}: param.{{in}}{{fpc name}},
  {{/if}}
{{/inline}}

{{~#*inline "readMany"}}
    const res = await prisma.{{../../tag}}.findMany({
      where: {
      {{#each d.parameters}}
        {{#if (equal name "orderBy") (equal name "orderByField")}}
        {{else}}
          {{#if (equal name "orderByField")}}
          {{else}}
            {{#if (equal name "page")}}         
            {{else}}
              {{#if (equal name "take")}}
              {{else}}
              {{~> JSESSIONID}}
              {{/if}}               
            {{/if}}
          {{/if}}
        {{/if}}
      {{/each}}
      // custom begin {{d.operationId}}Where
{{{lookup ../../custom (add d.operationId "Where")}}}
      // custom end {{d.operationId}}Where
      },
      select: {
        {{#each d.responses.200.content.[application/json].schema.items.properties}}
        {{@key}}: true,
        {{/each}}
        // custom begin {{d.operationId}}
{{{lookup ../../custom d.operationId }}}
        // custom end {{d.operationId}}
      },
      {{#each d.parameters}}
        {{#if (equal name "orderBy")}}
      orderBy: {
        [param.queryOrderByField]: param.queryOrderBy,
      },
        {{else}}
        {{/if}}
        {{#if (equal name "take")}}
      take: param.queryTake,
        {{else}}
        {{/if}}
        {{#if (equal name "page")}}
      skip: param.queryPage * param.queryTake,
        {{else}}
        {{/if}}             
      {{/each}}
    }).catch((e) => {
      throw e;
    }).finally(() => {
      prisma.$disconnect();
    });
{{/inline}}

{{~#*inline "updateOne"}}
    const res = await prisma.{{../../tag}}.update({
      where: {
        {{#each d.parameters}}
        {{name}}: param.{{in}}{{fpc name}},
        {{/each}}
      },
      data: {
      {{#if d.requestBody.content.[application/json].schema.type}}
        {{#if (equal d.requestBody.content.[application/json].schema.type "object") }}
          {{#each d.requestBody.content.[application/json].schema.properties as |p|}}
        {{@key}}: param.body{{fpc @key}},
          {{/each}}
        {{/if}}
      {{/if}} 
      },
    }).catch((e) => {
      throw e;
    }).finally(() => {
      prisma.$disconnect();
    });
{{/inline}}

{{~#*inline "updateMany"}}
    const res = {
      count: 0,
    };

    await Promise.all(
        param.bodyDataList.map((e: any) => {
          const data: any = {};
          const where: any = {};
          Object.keys(e).forEach((k) => {
            const key: string = k.charAt(4).toLowerCase() +
            k.substring(4).slice(1);

            if (key === param.bodyWhereField) {
              where[param.bodyWhereField] = e[k];
            } else {
              data[key] = e[k];
            }
          });

          res.count++;
          return prisma.{{../../tag}}.update({
            data,
            where,
          });
        }),
    ).catch((e) => {
      throw e;
    }).finally(() => {
      prisma.$disconnect();
    });
{{/inline}}

{{~#*inline "deleteOne"}}
    const res = await prisma.{{../../tag}}.delete({
      where: {
        {{#each d.parameters}}
        {{name}}: param.{{in}}{{fpc name}},
        {{/each}}
      },
    }).catch((e) => {
      throw e;
    }).finally(() => {
      prisma.$disconnect();
    });
{{/inline}}

{{~#*inline "deleteMany"}}
    const res = await prisma.{{../../tag}}.deleteMany({
      where: {
        {{#each d.parameters}}
        {{name}}: {
          in: param.{{in}}{{fpc name}},
        },
        {{/each}}
      },
    }).catch((e) => {
      throw e;
    }).finally(() => {
      prisma.$disconnect();
    });
{{/inline}}

{{~#*inline "uploadMany"}}
    // custom begin {{d.operationId}}
{{{lookup ../../custom d.operationId }}}
    // custom end {{d.operationId}}
    {{!-- const res: any = await prisma.{{../../tag}}.createMany({
      data,
      skipDuplicates: true,
    }).catch((e) => {
      throw e;
    }).finally(() => {
      prisma.$disconnect();
    }); --}}
{{/inline}}

{{#*inline "custom"}}
    // custom begin {{d.operationId}}
{{{lookup ../../custom d.operationId }}}
    // custom end {{d.operationId}}
{{/inline}}

@Service()
export class {{fpc tag}}Model {
{{#each data.paths as |path|}}
  {{#each path as |d|}}
    {{#if (equal ../../tag d.tags.0) }}
  async {{d.operationId}}(
      param: requestTypes.{{fpc d.operationId}}Params,
        {{#if (equal (model_type d.operationId) "custom")  }}
      customParam: any,
        {{/if}}
      // custom begin {{d.operationId}}Param
{{{lookup ../../custom (add d.operationId "Param")}}}
      // custom end {{d.operationId}}Param
        {{#if (equal (model_type d.operationId) "uploadMany")  }}
      files: Express.Multer.File[],
      ownerId: string,
        {{/if}}
  ) {
{{ > (model_type d.operationId)}}
      {{#if (equal (model_type d.operationId) "custom")  }}
      {{else}}
        {{#if (model_type_is_array d.operationId) }}
    return res.count;
        {{else}}
    return res;
        {{/if}}    
      {{/if}}
  }
    {{/if}}
  {{/each}}
{{/each}}
  // custom begin model
{{{lookup ../../custom "model" }}}
  // custom end model
}
