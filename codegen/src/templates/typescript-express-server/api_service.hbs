import {Service, Inject} from 'typedi';
{{!-- import {FindManyOption} from './authSchemas'; --}}
import { {{~fpc tag}}Model} from './{{tag}}.model';
import * as requestTypes from './{{tag}}.parameters';
{{!-- import {User} from '@prisma/client'; --}}
import {errors} from '../../errors';
// custom begin import
{{{lookup ../../custom "import" }}}
// custom end import


@Service()
export class {{fpc tag}}Service {
  @Inject()
  private {{tag}}Model!: {{fpc tag}}Model;
  // custom begin Inject
{{{lookup ../../custom "Inject" }}}
  // custom end Inject

{{#each data.paths as |path|}}
  {{#each path as |d|}}
  {{#if (equal ../../tag d.tags.0) }}
  async {{d.operationId}}(
      param :requestTypes.{{fpc d.operationId}}Params,
      session: Express.Request['session'],
        {{!-- {{~#if (model_type_is_array d.operationId) ~}}
[]
        {{~else~}}
        {{~/if}}, --}}
        {{#if (equal (model_type d.operationId) "uploadMany")  }}
      files: Express.Multer.File[],
        {{/if}}
  ) {
    {{#if (equal (model_type d.operationId) "custom")  }}
    // custom begin {{d.operationId}}
{{{lookup ../../custom d.operationId }}}
    // custom end {{d.operationId}}
    {{else}}
    // custom begin {{d.operationId}}
{{{lookup ../../custom d.operationId }}}
    // custom end {{d.operationId}}
    {{#each d.parameters}}
      {{#if (equal name "JSESSIONID") }}
    if (!session.userInfo) throw new errors.AuthenticationFailedError;
    param.cookieJsessionid = session.userInfo.id;
      {{/if}}      
    {{/each}}

    const res = await this.{{../../tag}}Model.{{d.operationId}}(
        param,
      {{#if (equal (model_type d.operationId) "uploadMany")  }}
        files,
        session.userInfo?.id!,
      {{/if}}
    ).catch((e) =>{
      throw e;
    });

    // custom begin {{d.operationId}}2
{{{lookup ../../custom (add d.operationId "2")}}}
    // custom end {{d.operationId}}2
    return res;
    {{/if}}
  }
  {{/if}}
  {{/each}}
{{/each}}
}

