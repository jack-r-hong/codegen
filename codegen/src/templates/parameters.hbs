
{{!-- {{#with (lookup data.components.schemas (fpc tag)) }}
export type {{fpc ../tag}} = {
  {{#each properties as |param|}}
   {{@key}}: {{parameter_type param.type}},
  {{/each}}
}
{{/with}} --}}

{{~#each data.paths as |path|}}
  {{#each path as |data|}}
    {{#if (equal ../../tag data.tags.0) }}
export type {{fpc data.operationId}}Request = {
      {{#each data.parameters as |p|}}
    {{p.in}}{{fpc p.name}}: {{parameter_type p.schema.type}}
      {{/each}}
      {{#if data.requestBody.content.[application/json].schema.type}}
        {{#if (equal data.requestBody.content.[application/json].schema.type "object") }}
          {{#each data.requestBody.content.[application/json].schema.properties as |p|}}
    body{{fpc @key}}: {{parameter_type p.type}},
          {{/each}}
        {{/if}}
        {{#if (equal data.requestBody.content.[application/json].schema.type "array") }}
          {{#each data.requestBody.content.[application/json].schema.items.properties as |p|}}
    body{{fpc @key}}: {{parameter_type p.type}},
          {{/each}}
        {{/if}}       
      {{/if}}
}

export const {{fpc data.operationId}}RequestConvert = (
    body: any,
    query: any,
    path: any,
) => {
    {{#if data.requestBody.content.[application/json].schema.type}}
      {{#if (equal data.requestBody.content.[application/json].schema.type "array") }}
  const arrayBody = body.map((e: any) => {
    return {
        {{#each data.requestBody.content.[application/json].schema.items.properties as |p|}}
            {{#if (equal p.type "integer") }}
      body{{fpc @key}}: parseInt(e.{{@key}}),
            {{else}}
      body{{fpc @key}}: e.{{@key}},
            {{/if}}    
        {{/each}}
    };
  });
      {{/if}}       
    {{/if}}  
      {{#if data.requestBody.content.[application/json].schema.type}}
        {{#if (equal data.requestBody.content.[application/json].schema.type "array") }}
  return arrayBody;
        {{else}}
  return {
        {{#each data.parameters as |p|}}
          {{#if (equal p.schema.type "integer") }}
    {{p.in}}{{fpc p.name}}: parseInt({{p.in}}.{{p.name}}),
          {{else}}
    {{p.in}}{{fpc p.name}}: {{p.in}}.{{p.name}},
          {{/if}}    
        {{/each}}
          {{#if (equal data.requestBody.content.[application/json].schema.type "object") }}
            {{#each data.requestBody.content.[application/json].schema.properties as |p|}}
              {{#if (equal p.type "integer") }}
    body{{fpc @key}}: parseInt(body.{{@key}}),
              {{else}}
    body{{fpc @key}}: body.{{@key}},
              {{/if}}    
            {{/each}}
          {{/if}}
  };
        {{/if}}  
        {{else}}
  return {
      {{#each data.parameters as |p|}}
        {{#if (equal p.schema.type "integer") }}
    {{p.in}}{{fpc p.name}}: parseInt({{p.in}}.{{p.name}}),
        {{else}}
    {{p.in}}{{fpc p.name}}: {{p.in}}.{{p.name}},
        {{/if}}    
      {{/each}}    
  };
      {{/if}}   
};
    {{/if}}
  {{/each}}
{{/each}}