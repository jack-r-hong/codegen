
version: '3.9'

services:
  ts-node-server:
    build:
      context: ../
      dockerfile: deploy/node-pod.Dockerfile
      # target: base
    volumes:
      - ../certreq:/usr/src/app/certreq
      # - ./src:/usr/src/app/src
      # - ./prisma:/usr/src/app/prisma
      # - ./other:/usr/src/app/other
    container_name: ts-node-server
    working_dir: /usr/src/app/
    ports:
      - '4000:4000'
      - '4443:4443'
    networks:
      - backend
    command: npm start
    env_file:
      - ../.env    

    depends_on: 
      - db
  db:
    container_name: db
    build: 
      context: ..
      dockerfile: deploy/mysql.Dockerfile
    restart: always

    env_file:
      - ../.env   
    networks:
      - backend
    # volumes:
    #   - ./mysql:/var/lib/mysql
    ports:
      - 3306:3306
  redis:
    restart: always
    container_name: redis
    image: redis:alpine
    command: ["redis-server", "/etc/redis/redis.conf"]
    ports:
      - 6379:6379
    volumes:
      - /data/redis-data:/data  
      - ../other/redis.conf:/etc/redis/redis.conf 
    networks:
      - backend         
  nginx: 
    build: 
      context: ..
      dockerfile: deploy/nginx.Dockerfile
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx_templates:/etc/nginx/templates
      - ../certreq:/etc/nginx/ssl
      - ../build/web:/usr/share/nginx/html
    networks:
      - backend    
    env_file:
      - ../.env 
    # volumes:
    #   - ./app/build/web:/usr/share/nginx/html
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - backend


networks:
  backend:
