// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BackstageAdmin {
  account  String  @unique  @map("account")                 
  createdAt  DateTime  @default(now()) @map("created_at")                 
  id  String @id @default(uuid()) @map("id")                 
  name  String?   @map("name")                 
  password  String  @map("password")                 
  status  Int  @default(1)  @map("status")                 
  
    // custom begin BackstageAdmin

    // custom end BackstageAdmin
}
model BankAccount {
  account  Int  @map("account")                 
  code  Int  @map("code")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  name  String  @map("name")                 
  order  Int  @map("order")                 
  status  Int  @default(1)  @map("status")                 
  bankAccountVerify BankAccountVerify?
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin BankAccount
  @@unique([userId, order], name: "uniqueOrder")

    // custom end BankAccount
}
model BankAccountVerify {
  account  Int  @map("account")                 
  code  Int  @map("code")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  name  Int  @map("name")                 
  photo  Int  @map("photo")                 
  bankAccount BankAccount? @relation(fields: [bankId], references: [id])
  bankId Int @map("bank_id")  @unique
  bankAccountVerifyResonDes BankAccountVerifyResonDes[]
  
    // custom begin BankAccountVerify

    // custom end BankAccountVerify
}
model BankAccountVerifyReson {
  des  String  @map("des")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  bankAccountVerifyResonDes BankAccountVerifyResonDes[]
  
    // custom begin BankAccountVerifyReson

    // custom end BankAccountVerifyReson
}
model BankAccountVerifyResonDes {
  field  String  @map("field")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  bankAccountVerify BankAccountVerify? @relation(fields: [bankAccountVerifyId], references: [id])
  bankAccountVerifyId Int @map("bank_account_verify_id")  
  bankAccountVerifyReson BankAccountVerifyReson? @relation(fields: [bankAccountVerifyResonId], references: [id])
  bankAccountVerifyResonId Int @map("bank_account_verify_reson_id")  
  
    // custom begin BankAccountVerifyResonDes
  @@unique([bankAccountVerifyId, field], name: "uniqueBankAccountField")

    // custom end BankAccountVerifyResonDes
}
model ExchangeRateBuy {
  bouns  Int  @map("bouns")                 
  des  String  @map("des")                 
  dollars  Int  @map("dollars")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  point  Int  @map("point")                 
  type  Int  @map("type")                 
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")                 
  
    // custom begin ExchangeRateBuy

    // custom end ExchangeRateBuy
}
model ExchangeRateSell {
  des  String  @map("des")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  rangeLower  Int  @map("range_lower")                 
  rangeUpper  Int  @map("range_upper")                 
  rate  Int  @map("rate")                 
  type  Int  @map("type")                 
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")                 
  
    // custom begin ExchangeRateSell

    // custom end ExchangeRateSell
}
model PayManage {
  createdAt  DateTime  @default(now()) @map("created_at")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  qrCode  String  @map("qr_code")                 
  remark  String  @map("remark")                 
  status  Int  @default(1)  @map("status")                 
  type  Int  @map("type")                 
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin PayManage

    // custom end PayManage
}
model Referral {
  id  Int @id @default(autoincrement()) @map("id")                 
  rebate  Decimal   @db.Decimal(4, 2)  @map("rebate")                 
  referralMap ReferralMap[]
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  @unique
  
    // custom begin Referral

    // custom end Referral
}
model ReferralMap {
  id  Int @id @default(autoincrement()) @map("id")                 
  referral Referral? @relation(fields: [referralId], references: [id])
  referralId Int @map("referral_id")  
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin ReferralMap

    // custom end ReferralMap
}
model Transaction {
  account  String  @map("account")                 
  bankAccount  Int  @map("bank_account")                 
  bankCode  Int  @map("bank_code")                 
  bankName  String  @map("bank_name")                 
  bonusPoint  Int  @map("bonus_point")                 
  bos  Int  @map("bos")                 
  createdAt  DateTime  @default(now()) @map("created_at")                 
  handlingFee  Int  @map("handling_fee")                 
  id  String @id @default(uuid()) @map("id")                 
  payMethod  Int  @map("pay_method")                 
  point  Int  @map("point")                 
  process  Int  @default(1)  @map("process")                 
  serviceFee  Int  @map("service_fee")                 
  state  Int  @default(1)  @map("state")                 
  totalDollars  Int  @map("total_dollars")                 
  totalPoints  Int  @map("total_points")                 
  twd  Int  @map("twd")                 
  transactionRecive TransactionRecive?
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin Transaction
  transactionChatroomMessange TransactionChatroomMessange[]
  transactionChatroomCursor TransactionChatroomCursor[]   
  pairedAt DateTime? @map("pair_at")
  paidAt DateTime? @map("paid_at") 
  completedAt DateTime? @map("completed_at") 

    // custom end Transaction
}
model TransactionRecive {
  createdAt  DateTime  @default(now()) @map("created_at")                 
  id  String @id @default(uuid()) @map("id")                 
  transaction Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String @map("transaction_id")  @unique
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin TransactionRecive

    // custom end TransactionRecive
}
model User {
  address  String?   @map("address")                 
  area  String?   @map("area")                 
  birthdate  String?   @map("birthdate")                 
  city  String?   @map("city")                 
  country  String?   @map("country")                 
  createdAt  DateTime  @default(now()) @map("created_at")                 
  firstBonus  Boolean  @default(true)  @map("first_bonus")                 
  gameUid  String?   @map("game_uid")                 
  id  String @id @default(uuid()) @map("id")                 
  idCard  String?   @map("id_card")                 
  idCardDate  String?   @map("id_card_date")                 
  idCardPosiition  String?   @map("id_card_posiition")                 
  idCardType  Int?   @map("id_card_type")                 
  isAgent  Boolean  @default(false)  @map("is_agent")                 
  lineId  String?   @map("line_id")                 
  name  String?   @map("name")                 
  password  String  @map("password")                 
  phone  String  @map("phone")                 
  phonePrefix  String  @map("phone_prefix")                 
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")                 
  userStatus  Int  @default(2)  @map("user_status")                 
  bankAccount BankAccount[]
  userLevel UserLevel? @relation(fields: [level], references: [level])
  level Int @map("level") @default(1) 
  payManage PayManage[]
  referral Referral?
  referralMap ReferralMap[]
  transaction Transaction[]
  transactionRecive TransactionRecive[]
  userTransaction UserTransaction?
  userVerify UserVerify?
  userVerifyPhoto UserVerifyPhoto[]
  
    // custom begin User
  @@unique([phone, phonePrefix], name: "phone_all")

    // custom end User
}
model UserLevel {
  id  Int @id @default(autoincrement()) @map("id")                 
  level  Int  @unique  @default(1)  @map("level")                 
  user User[]
  
    // custom begin UserLevel

    // custom end UserLevel
}
model UserTransaction {
  atcbw  Int  @map("atcbw")                 
  cnot  Int  @map("cnot")                 
  cta  Int  @map("cta")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  limit  Int  @map("limit")                 
  rebate  Int?   @map("rebate")                 
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")                 
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  @unique
  
    // custom begin UserTransaction

    // custom end UserTransaction
}
model UserVerify {
  address  Int  @default(1)  @map("address")                 
  area  Int  @default(1)  @map("area")                 
  birthdate  Int  @default(1)  @map("birthdate")                 
  certificate  Int  @default(1)  @map("certificate")                 
  city  Int  @default(1)  @map("city")                 
  country  Int  @default(1)  @map("country")                 
  gameUid  Int  @default(1)  @map("game_uid")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  idCard  Int  @default(1)  @map("id_card")                 
  idCardDate  Int  @default(1)  @map("id_card_date")                 
  idCardPhoto  Int  @default(1)  @map("id_card_photo")                 
  idCardPosiition  Int  @default(1)  @map("id_card_posiition")                 
  idCardType  Int  @default(1)  @map("id_card_type")                 
  lineId  Int  @default(1)  @map("line_id")                 
  name  Int  @default(1)  @map("name")                 
  selfie  Int  @default(1)  @map("selfie")                 
  sign  Int  @default(1)  @map("sign")                 
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")                 
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  @unique
  userVerifyResonDes UserVerifyResonDes[]
  
    // custom begin UserVerify

    // custom end UserVerify
}
model UserVerifyPhoto {
  createdAt  DateTime  @default(now()) @map("created_at")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  path  String  @map("path")                 
  type  Int  @map("type")                 
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin UserVerifyPhoto
  @@unique([userId, type], name: "uniqueType")

    // custom end UserVerifyPhoto
}
model UserVerifyReson {
  des  String  @map("des")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  userVerifyResonDes UserVerifyResonDes[]
  
    // custom begin UserVerifyReson

    // custom end UserVerifyReson
}
model UserVerifyResonDes {
  field  String  @map("field")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  userVerifyReson UserVerifyReson? @relation(fields: [UserVerifyResonId], references: [id])
  UserVerifyResonId Int @map("user_verify_reson_id")  
  userVerify UserVerify? @relation(fields: [userVerifyId], references: [id])
  userVerifyId Int @map("user_verify_id")  
  
    // custom begin UserVerifyResonDes
  @@unique([userVerifyId, field], name: "uniqueUserField")

    // custom end UserVerifyResonDes
}


// custom begin model
model ServiceChatroom {
  createdAt  DateTime  @default(now()) @map("created_at")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  name  String  @map("name")                 
  type  String  @map("type")                 
  userId  String  @map("user_id")                 
  text String 
  data Bytes? @map("data") @db.Blob               
}
model TransactionChatroomMessange {
  createdAt  DateTime  @default(now()) @map("created_at")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  name  String  @map("name")                 
  type  String  @map("type")                 
  userId  String  @map("user_id")    
  role  Int     
  text String 
  data Bytes? @map("data") @db.MediumBlob
  transactionId String @map("transaction_id")
  transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}
model TransactionChatroomCursor {
  id  Int @id @default(autoincrement()) @map("id")         
  transactionId String @map("transaction_id")
  userId  String @map("user_id")
  cursor Int 
  transactionChatroom Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  @@unique([transactionId, userId], name: "uniqueUserCursorId")
}
model TransactionQrcode {
  id  Int @id @default(autoincrement()) @map("id")                 
  userId  String  @map("user_id") @unique     
  data Bytes? @map("data") @db.MediumBlob
  @@map("transactionQrcode")
}
model TransactionSetting {
  id  Int @id @default(autoincrement()) @map("id")       
  firstBonusPoint Int  @map("first_bonus_point")  
  handlingFee Int  @map("handling_fee")  
  serviceFee Int  @map("service_fee")  
  @@map("transactionSetting")
}

// custom end model



