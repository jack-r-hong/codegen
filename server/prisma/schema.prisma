// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BankAccount {
  account  Int  @map("account")                 
  code  Int  @map("code")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  name  String  @map("name")                 
  order  Int  @map("order")                 
  status  Int  @default(1)  @map("status")                 
  bankAccountVerify BankAccountVerify?
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin BankAccount
  @@unique([userId, order], name: "uniqueOrder")

    // custom end BankAccount
}
model BankAccountVerify {
  account  Int  @map("account")                 
  code  Int  @map("code")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  name  Int  @map("name")                 
  photo  Int  @map("photo")                 
  bankAccount BankAccount? @relation(fields: [bankId], references: [id])
  bankId Int @map("bank_id")  @unique
  bankAccountVerifyResonDes BankAccountVerifyResonDes[]
  
    // custom begin BankAccountVerify

    // custom end BankAccountVerify
}
model BankAccountVerifyReson {
  des  String  @map("des")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  bankAccountVerifyResonDes BankAccountVerifyResonDes[]
  
    // custom begin BankAccountVerifyReson

    // custom end BankAccountVerifyReson
}
model BankAccountVerifyResonDes {
  field  String  @map("field")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  bankAccountVerify BankAccountVerify? @relation(fields: [bankAccountVerifyId], references: [id])
  bankAccountVerifyId Int @map("bank_account_verify_id")  
  bankAccountVerifyReson BankAccountVerifyReson? @relation(fields: [bankAccountVerifyResonId], references: [id])
  bankAccountVerifyResonId Int @map("bank_account_verify_reson_id")  
  
    // custom begin BankAccountVerifyResonDes
  @@unique([bankAccountVerifyId, field], name: "uniqueBankAccountField")

    // custom end BankAccountVerifyResonDes
}
model ExchangeRate {
  bos  Int  @map("bos")                 
  bouns  Int  @map("bouns")                 
  createdAt  DateTime  @default(now()) @map("created_at")                 
  des  String  @map("des")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  rangeLower  Int  @map("range_lower")                 
  rangeUpper  Int  @map("range_upper")                 
  rate  Int  @map("rate")                 
  type  Int  @map("type")                 
  
    // custom begin ExchangeRate

    // custom end ExchangeRate
}
model Transaction {
  account  String  @map("account")                 
  bankAccount  Int  @map("bank_account")                 
  bankCode  Int  @map("bank_code")                 
  bankName  String  @map("bank_name")                 
  bonusPoint  Int  @map("bonus_point")                 
  bos  Int  @map("bos")                 
  createdAt  DateTime  @default(now()) @map("created_at")                 
  id  String @id @default(uuid()) @map("id")                 
  point  Int  @map("point")                 
  state  Int  @default(1)  @map("state")                 
  twd  Int  @map("twd")                 
  transactionRecive TransactionRecive[]
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin Transaction

    // custom end Transaction
}
model TransactionRecive {
  createdAt  DateTime  @default(now()) @map("created_at")                 
  id  String @id @default(uuid()) @map("id")                 
  transaction Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String @map("transaction_id")  
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin TransactionRecive

    // custom end TransactionRecive
}
model User {
  address  String?   @map("address")                 
  area  String?   @map("area")                 
  birthdate  String?   @map("birthdate")                 
  city  String?   @map("city")                 
  country  String?   @map("country")                 
  createdAt  DateTime  @default(now()) @map("created_at")                 
  email  String?   @map("email")                 
  id  String @id @default(uuid()) @map("id")                 
  idCard  String?   @map("id_card")                 
  idCardDate  String?   @map("id_card_date")                 
  idCardPosiition  String?   @map("id_card_posiition")                 
  idCardType  Int?   @map("id_card_type")                 
  name  String?   @map("name")                 
  password  String  @map("password")                 
  phone  String  @map("phone")                 
  phonePrefix  String  @map("phone_prefix")                 
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")                 
  userStatus  Int  @default(2)  @map("user_status")                 
  bankAccount BankAccount[]
  userLevel UserLevel? @relation(fields: [level], references: [level])
  level Int @map("level") @default(1) 
  transaction Transaction[]
  transactionRecive TransactionRecive[]
  userTransaction UserTransaction?
  userVerify UserVerify?
  userVerifyPhoto UserVerifyPhoto[]
  
    // custom begin User
  @@unique([phone, phonePrefix], name: "phone_all")

    // custom end User
}
model UserLevel {
  id  Int @id @default(autoincrement()) @map("id")                 
  level  Int  @unique  @default(1)  @map("level")                 
  user User[]
  
    // custom begin UserLevel

    // custom end UserLevel
}
model UserTransaction {
  atcbw  Int  @map("atcbw")                 
  cnot  Int  @map("cnot")                 
  cta  Int  @map("cta")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  limit  Int  @map("limit")                 
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")                 
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  @unique
  
    // custom begin UserTransaction

    // custom end UserTransaction
}
model UserVerify {
  address  Int  @default(1)  @map("address")                 
  birthdate  Int  @default(1)  @map("birthdate")                 
  certificate  Int  @default(1)  @map("certificate")                 
  country  Int  @default(1)  @map("country")                 
  email  Int  @default(1)  @map("email")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  idCardDate  Int  @default(1)  @map("id_card_date")                 
  idCardPhoto  Int  @default(1)  @map("id_card_photo")                 
  idCardPosiition  Int  @default(1)  @map("id_card_posiition")                 
  idCardType  Int  @default(1)  @map("id_card_type")                 
  name  Int  @default(1)  @map("name")                 
  selfie  Int  @default(1)  @map("selfie")                 
  sign  Int  @default(1)  @map("sign")                 
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")                 
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  @unique
  userVerifyResonDes UserVerifyResonDes[]
  
    // custom begin UserVerify

    // custom end UserVerify
}
model UserVerifyPhoto {
  createdAt  DateTime  @default(now()) @map("created_at")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  path  String  @map("path")                 
  type  Int  @map("type")                 
  user User? @relation(fields: [userId], references: [id])
  userId String @map("user_id")  
  
    // custom begin UserVerifyPhoto
  @@unique([userId, type], name: "uniqueType")

    // custom end UserVerifyPhoto
}
model UserVerifyReson {
  des  String  @map("des")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  userVerifyResonDes UserVerifyResonDes[]
  
    // custom begin UserVerifyReson

    // custom end UserVerifyReson
}
model UserVerifyResonDes {
  field  String  @map("field")                 
  id  Int @id @default(autoincrement()) @map("id")                 
  userVerifyReson UserVerifyReson? @relation(fields: [UserVerifyResonId], references: [id])
  UserVerifyResonId Int @map("user_verify_reson_id")  
  userVerify UserVerify? @relation(fields: [userVerifyId], references: [id])
  userVerifyId Int @map("user_verify_id")  
  
    // custom begin UserVerifyResonDes
  @@unique([userVerifyId, field], name: "uniqueUserField")

    // custom end UserVerifyResonDes
}



