{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "This is a sample Petstore server.  You can find\nout more about Swagger at\n[http://swagger.io](http://swagger.io) or on\n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n",
    "version" : "robot_car",
    "title" : "Swagger Petstore",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "apiteam@swagger.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers" : [ 
    {
      "description" : "test server",
      "url" : "http://192.168.10.119:81/api"
    },
    {
      "description" : "api",
      "url" : "https://127.0.0.1/api"
    }, 
    {
      "url" : "http://127.0.0.1:4000/api"
    }
  ],
  "tags" : [
    {
      "name" : "user",
      "description" : "Operations about user"
    },
    {
      "name" : "transaction",
      "description" : "Operations about transaction"
    },
    {
      "name" : "bankAccount",
      "description" : "Operations about user"
    }     
  ],
  "paths" : {
    "/captcha" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "captcha",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {

                    }                    
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          }
        }
      }
    },  
    "/register" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "registerUser",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserRegister"
        },
        "responses" : {
          "200" : {
            "description" : "Ok",
            "headers" : {
              "Set-Cookie" : {
                "description" : "jwt cookie",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },            
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "description": "Captcha Error"
          },
          "409" : {
            "description": "已有電話"
          }
        }
      }
    },
    "/register/phone_check" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "send verify code to phone",
        "description" : "send verify code to phone.",
        "operationId" : "sendPhoneCheck",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "headers" : {
              "Set-Cookie" : {
                "description" : "jwt cookie",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },            
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "409" : {
            "description": "已有電話"
          }
        }
      },      
      "post" : {
        "tags" : [ "user" ],
        "summary" : "phone check",
        "description" : "phone check.",
        "operationId" : "phoneCheck",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserRegisterPhoneCheck"
        },
        "responses" : {
          "200" : {
            "description" : "Ok",
            "headers" : {
              "Set-Cookie" : {
                "description" : "jwt cookie",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },            
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          }
        }
      }
    },    
    "/login" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "phone" : {
                    "$ref" : "#/components/schemas/User/properties/phone"
                  },
                  "phonePrefix" : {
                    "$ref" : "#/components/schemas/User/properties/phonePrefix"
                  },                  
                  "password" : {
                    "$ref" : "#/components/schemas/User/properties/password"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              },
              "Set-Cookie" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer"
                        }                        
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/real_verify": {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "realVerify",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserVerifyUploadPhoto"
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              },
              "Set-Cookie" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer"
                        }                        
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },        
    "/real_verify/photo": {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "realVerifyPhoto",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserVerifyUploadPhoto"
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              },
              "Set-Cookie" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer"
                        }                        
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },    
    "/transaction" : {     
      "post" : {
        "tags" : [ "transaction" ],
        "summary" : "post transaction by id",
        "operationId" : "createTransaction",    
        "requestBody" : {
          "$ref" : "#/components/requestBodies/CreateTransaction"
        },           
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Transaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },

        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "transaction" ],
        "summary" : "Updated transaction",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateTransactionState",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Transaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UpdateTransaction"
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },
    "/transaction/my" : {
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "Get transaction by id",
        "operationId" : "readMyTransaction",
        "parameters" : [ 
          {
            "name" : "orderBy",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "desc"
            }
          },
          {
            "name" : "orderByField",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "createdAt"
            }
          },
          {
            "name" : "page",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 0
            }            
          },
          {
            "name" : "take",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 10
            }    
          }                   
        ],        
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Transaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },    
    "/transaction/pending" : {
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "Get transaction by id",
        "operationId" : "readPendingTransaction",
        "parameters" : [ 
          {
            "name" : "orderBy",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "desc"
            }
          },
          {
            "name" : "orderByField",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "createdAt"
            }
          },
          {
            "name" : "page",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 0
            }            
          },
          {
            "name" : "take",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 10
            }    
          }                   
        ],        
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Transaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },        
    "/transaction/{id}" : {
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "Get transaction by id",
        "operationId" : "readOneTransaction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format": "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Transaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },
    "/transaction/exchange_rate" : {     
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "get exchang rate",
        "operationId" : "getExchangeRate",            
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result":{
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "result": {
                      "0": {
                          "range": 0,
                          "rate": 120
                      },
                      "1": {
                          "range": 150000,
                          "rate": 130
                      },
                      "2": {
                          "range": 500000,
                          "rate": 140
                      }
                  }
                }          
              }

            }
            
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }

    },
    "/bank/my/account" : {     
      "get" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "getBankAccount",      
        "parameters" : [ 
          {   
            "name" : "status",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "enum": [1,2],
              "default": 1,
              "description" : "status map:\n * `1` - 未驗證\n * `2` - 已驗證\n"
            }
          }
        ],               
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BankAccount"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }

    }         

    
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  },
  "components" : {
    "schemas" : {
      "User" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "minLength" : 3,
            "maxLength" : 30,
            "nullable" : true
          },
          "phonePrefix" : {
            "description": "國碼",
            "type" : "string",
            "example": "886"
          },
          "phone" : {
            "type" : "string",
            "example": "945372644"
          },               
          "password" : {
            "type" : "string",
            "minLength" : 8,
            "maxLength" : 30,
            "example": "ffE22sq^wjb&w"
          },
          "userStatus" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "status map:\n * `1` - Normal\n * `2` - Unverified\n * `3` - Locking\n",
            "enum" : [ 1, 2, 3 ],
            "default" : 2
          },    
          "email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true
          },          
          "birthdate" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },   
          "country" : {
            "description": "residence country",
            "type" : "string",
            "nullable" : true
          },  
          "idCard" : {
            "type" : "string",
            "nullable" : true
          },       
          "idCardDate" : {
            "type" : "string",
            "nullable" : true
          },       
          "idCardPosiition" : {
            "type" : "string",
            "nullable" : true
          },   
          "idCardType" : {
            "type" : "integer",
            "nullable" : true,
            "enum": [1,2,3],
            "description" : "status map:\n * `1` - 初\n * `2` - 補\n * `3` - 換\n"
          },                                 
          "city" : {
            "description": "residence city",
            "type" : "string",
            "nullable" : true
          },    
          "area" : {
            "description": "residence area",
            "type" : "string",
            "nullable" : true
          },     
          "address" : {
            "description": "residence address",
            "type" : "string",
            "nullable" : true
          },                            
          "verifyPhotoPath" : {
            "type" : "string"
          },                    
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      
      "BankAccount" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "integer"
          },         
          "account" : {
            "type" : "integer"
          }, 
          "status" : {
            "type" : "integer",
            "enum": [1,2],
            "default": 1,
            "description" : "status map:\n * `1` - 未驗證\n * `2` - 已驗證\n"
          }, 
          "userId" : {
            "$ref" : "#/components/schemas/User/properties/id"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }                        
        }
      },
      "Transaction" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "bos" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "status map:\n * `1` - Buy\n * `2` - Sell\n",
            "enum" : [ 1, 2 ]            
          },
          "bonusPoint" : {
            "type" : "integer"
          },  
          "point" : {
            "type" : "integer"
          },                
          "twd" : {
            "type" : "integer"
          },   
          "state" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "status map:\n  * `0` - Failed\n * `1` - Pending\n * `2` - Pair Completed\n * `3` - Pay or recive Completed\n * `4` - Completed\n",
            "enum" : [0, 1, 2, 3, 4],
            "default": 1
          },                        
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }, 
          "account" : {
            "type" : "string"
          },      
          "userId" : {
            "$ref" : "#/components/schemas/User/properties/id"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }         
        }
      },
      "TransactionRecive" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },                     
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }, 
          "transactionId" : {
            "$ref" : "#/components/schemas/Transaction/properties/id"
          },
          "transaction" : {
            "$ref" : "#/components/schemas/Transaction"
          },                 
          "userId" : {
            "$ref" : "#/components/schemas/User/properties/id"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }         
        }
      }      
    },
    "requestBodies" : {
      "UserRegister" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "phone" : {
                  "$ref" : "#/components/schemas/User/properties/phone"
                },        
                "phonePrefix" : {
                  "$ref" : "#/components/schemas/User/properties/phonePrefix"
                },                                  
                "password" : {
                  "$ref" : "#/components/schemas/User/properties/password"
                },
                "passwordCheck" : {
                  "$ref" : "#/components/schemas/User/properties/password"
                },                
                "captcha" : {
                  "type": "string"
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },     
      "UserRegisterPhoneCheck" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "verify" : {
                  "type": "string"
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },    
      "UserRealVerify" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "$ref" : "#/components/schemas/User/properties/name"
                },        
                "email" : {
                  "$ref" : "#/components/schemas/User/properties/email"
                },                                  
                "birthdate" : {
                  "$ref" : "#/components/schemas/User/properties/birthdate"
                },
                "country" : {
                  "$ref" : "#/components/schemas/User/properties/country"
                },                
                "idCard" : {
                  "$ref" : "#/components/schemas/User/properties/idCard"
                },             
                "idCardDate" : {
                  "$ref" : "#/components/schemas/User/properties/idCardDate"
                },           
                "idCardPosiition" : {
                  "$ref" : "#/components/schemas/User/properties/idCardPosiition"
                },           
                "idCardType" : {
                  "$ref" : "#/components/schemas/User/properties/idCardType"
                },           
                "city" : {
                  "$ref" : "#/components/schemas/User/properties/city"
                },       
                "area" : {
                  "$ref" : "#/components/schemas/User/properties/area"
                },         
                "address" : {
                  "$ref" : "#/components/schemas/User/properties/address"
                }                                                                                       
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },   
      "UserVerifyUploadPhoto" : {
        "content" : {
          "multipart/form-data" : {
            "schema" : {
                "type" : "object",
                "properties" : {
                  "files" : {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },            
      "User" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "$ref" : "#/components/schemas/User/properties/name"
                },
                "email" : {
                  "$ref" : "#/components/schemas/User/properties/email"
                },
                "password" : {
                  "$ref" : "#/components/schemas/User/properties/password"
                },
                "phone" : {
                  "$ref" : "#/components/schemas/User/properties/phone"
                },
                "userStatus" : {
                  "$ref" : "#/components/schemas/User/properties/userStatus",
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "BankAccountCreate": {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "dataList": {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "$ref" : "#/components/schemas/BankAccount/properties/name"
                    },
                    "code" : {
                      "$ref" : "#/components/schemas/BankAccount/properties/code"
                    },
                    "account" : {
                      "$ref" : "#/components/schemas/BankAccount/properties/account"
                    }
                  }
                }                  
                }

              }

            }
          }
        },
        "description" : "List of user object"
      },
      "UserArray" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "dataList": {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "$ref" : "#/components/schemas/User/properties/name"
                    },
                    "email" : {
                      "$ref" : "#/components/schemas/User/properties/email"
                    },
                    "password" : {
                      "$ref" : "#/components/schemas/User/properties/password"
                    },
                    "phone" : {
                      "$ref" : "#/components/schemas/User/properties/phone"
                    },
                    "userStatus" : {
                      "$ref" : "#/components/schemas/User/properties/userStatus"
                    }
                  }
                }                  
                }

              }

            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "CreateTransaction" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "bos" : {
                  "$ref" : "#/components/schemas/Transaction/properties/bos"
                },      
                "point" : {
                  "$ref" : "#/components/schemas/Transaction/properties/point"
                },  
                "twd" : {
                  "$ref" : "#/components/schemas/Transaction/properties/twd"
                },  
                "account" : {
                  "$ref" : "#/components/schemas/Transaction/properties/account"
                }
              }
            }
          }
        },
        "required" : true
      },
      "UpdateTransaction" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "state" : {
                  "$ref" : "#/components/schemas/Transaction/properties/state"
                }
              }
            }
          }
        },
        "required" : true
      }         
    },
    "parameters" : {
      "createdAt" : {
        "name" : "createdAt",
        "in" : "query",
        "description" : "number of items to skip",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "updatedAt" : {
        "name" : "updatedAt",
        "in" : "query",
        "description" : "number of items to skip",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "responses" : {
      "User" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "name" : {
                  "type" : "string"
                },
                "email" : {
                  "type" : "string",
                  "format" : "email"
                },
                "phone" : {
                  "type" : "string",
                  "format" : "phone",
                  "nullable" : true
                },
                "createdAt" : {
                  "type" : "string",
                  "format" : "date-time"
                },
                "updatedAt" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            }
          }
        }
      },
      "Transaction" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "bos" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "status map:\n * `1` - Buy\n * `2` - Sell\n",
                  "enum" : [ 1, 2 ]            
                },
                "bonusPoint" : {
                  "type" : "integer"
                },  
                "point" : {
                  "type" : "integer"
                },                
                "twd" : {
                  "type" : "integer"
                },   
                "state" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "status map:\n * `1` - Pendding\n * `2` - Completed\n * `3` - Failed\n",
                  "enum" : [ 1, 2, 3 ],
                  "default": 1
                },                        
                "createdAt" : {
                  "type" : "string",
                  "format" : "date-time"
                }, 
                "account" : {
                  "type" : "string"
                },      
                "userId" : {
                  "$ref" : "#/components/schemas/User/properties/id"
                }   
              }
            }
          }
        }
      },      
      "BankAccount" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "integer",
                      "format" : "int64"
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "code" : {
                      "type" : "integer"
                    },         
                    "account" : {
                      "type" : "integer"
                    }, 
                    "status" : {
                      "type" : "integer",
                      "enum": [1,2],
                      "default": 1,
                      "description" : "status map:\n * `1` - 未驗證\n * `2` - 已驗證\n"
                    }
                  }                  
                }
              },
              "example":{
                "result" : {
                  "2": {
                    "id": 2,
                    "name": "name",
                    "code": 123456,
                    "account": 1245,
                    "status": 2
                  },
                  "3": {
                    "id": 3,
                    "name": "name2",
                    "code": 123456,
                    "account": 1245,
                    "status": 2
                  }                 
                }
              }
            }
          }
        }
      },        
      "BadRequest" : {
        "description" : "Bad request"
      },
      "Unauthorized" : {
        "description" : "Unauthorized"
      },
      "Forbidden" : {
        "description" : "Forbidden"
      },
      "NotFound" : {
        "description" : "Not found"
      },
      "Conflict" : {
        "description" : "Conflict"
      }
    },
    "securitySchemes" : {
      "cookieAuth" : {
        "type" : "apiKey",
        "name" : "JSESSIONID",
        "in" : "cookie"
      }
    }
  }
}