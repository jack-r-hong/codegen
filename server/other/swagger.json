{ 
  "openapi" : "3.0.0",
  "info" : {
    "description" : "This is a sample Petstore server.  You can find\nout more about Swagger at\n[http://swagger.io](http://swagger.io) or on\n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n",
    "version" : "robot_car",
    "title" : "Coin Bank",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "apiteam@swagger.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers" : [ 
    {
      "description" : "api",
      "url" : "https://127.0.0.1/api"
    }, 
    {
      "description" : "test server",
      "url" : "https://192.168.10.119/api"
    }
  ],
  "tags" : [
    {
      "name" : "user",
      "description" : "Operations about user"
    },
    {
      "name" : "transaction",
      "description" : "Operations about transaction"
    },
    {
      "name" : "transactionSetting",
      "description" : "Operations about transaction setting"
    },    
    {
      "name" : "bankAccount",
      "description" : "Operations about user"
    },
    {
      "name" : "userVerifyPhoto",
      "description" : "Operations about user"
    },
    {
      "name" : "exchangeRateBuy",
      "description" : "Operations about user"
    },
    {
      "name" : "exchangeRateSell",
      "description" : "Operations about user"
    },    
    {
      "name" : "payManage",
      "description" : "Operations about user"
    },
    {
      "name" : "backstageAdmin",
      "description" : "Operations about backstageAdmin"
    },
    {
      "name" : "chatroom",
      "description" : "Operations about chatroom"
    },
    {
      "name" : "cashFlow",
      "description" : "Operations about cashFlow"
    },
    {
      "name" : "userLevel",
      "description" : "Operations about cashFlow"
    },
    {
      "name" : "rebate",
      "description" : "Operations about rebate"
    }         
  ],
  "paths" : {
    "/captcha" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "captcha",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "headers" : {
              "Set-Cookie" : {
                "description" : "jwt cookie",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
                
              }
            },               
            "content" : {
              "image/svg+xml": {
                
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          }
        }
      }
    },  
    "/register" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "registerUser",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserRegister"
        },
        "responses" : {
          "200" : {
            "description" : "Ok",
            "headers" : {
              "Set-Cookie" : {
                "description" : "jwt cookie",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },            
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "description": "Captcha Error"
          },
          "409" : {
            "description": "已有電話"
          }
        }
      }
    },
    "/register/phone_check" : {  
      "post" : {
        "tags" : [ "user" ],
        "summary" : "phone check",
        "description" : "phone check.",
        "operationId" : "phoneCheck",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserRegisterPhoneCheck"
        },
        "responses" : {
          "200" : {
            "description" : "Ok",
            "headers" : {
              "Set-Cookie" : {
                "description" : "jwt cookie",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },            
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          }
        }
      }
    },    
    "/login" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "phone" : {
                    "$ref" : "#/components/schemas/User/properties/phone"
                  },
                  "phonePrefix" : {
                    "$ref" : "#/components/schemas/User/properties/phonePrefix"
                  },                  
                  "password" : {
                    "$ref" : "#/components/schemas/User/properties/password"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              },
              "Set-Cookie" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "string",
                          "format": "uuid"
                        },
                        "userStatus": {
                          "$ref" : "#/components/schemas/User/properties/userStatus"
                        },
                        "phone": {
                          "$ref" : "#/components/schemas/User/properties/phone"
                        },
                        "gameUid": {
                          "$ref" : "#/components/schemas/User/properties/gameUid"
                        },
                        "referralCode": {
                          "type": "string"
                        },
                        "isAgent": {
                          "$ref" : "#/components/schemas/User/properties/isAgent"
                        }                                 
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/LoginFailed"
          }
        }
      }
    },
    "/logout" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "logoutUser",
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },  
    "/forget_password/phone_check" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "forgetPasswordPhoneCheck",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "phone" : {
                    "$ref" : "#/components/schemas/User/properties/phone"
                  },
                  "phonePrefix" : {
                    "$ref" : "#/components/schemas/User/properties/phonePrefix"
                  }            
                }
              }
            }
          }
        },                
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/PhoneNotFound"
          }          
          
        }
      }
    },  
    "/forget_password/phone_check/verify" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "forgetPasswordPhoneCheckVerify",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "verify" : {
                    "type": "string"
                  }     
                }
              }
            }
          }
        },                
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref" : "#/components/responses/VerificationCodeIncorrect"
          }
        }
      }
    },      
    "/forget_password/reset" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "forgetPasswordReset",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {            
                  "password" : {
                    "$ref" : "#/components/schemas/User/properties/password"
                  },
                  "passwordCheck" : {
                    "$ref" : "#/components/schemas/User/properties/password"
                  }                  
                }
              }
            }
          }
        },        
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/VerificationCodeIncorrect"
          }          
        }
      }
    },           
    "/real_verify": {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "getRealVerify",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/RealVerify"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }        
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      },      
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "postRealVerify",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserCreateRealVerify"
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer"
                        }                        
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }        
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }  
    },      
    "/real_verify/photo": {
      "get" : {
        "tags" : [ "userVerifyPhoto" ],
        "summary" : "Logs user into the system",
        "operationId" : "getUserVerifyPhoto",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer"
                        }                        
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      },      
      "post" : {
        "tags" : [ "userVerifyPhoto" ],
        "summary" : "Logs user into the system",
        "operationId" : "uploadManyVerifyPhoto",
        "parameters" : [ {
          "name" : "types",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items":{
              "type": "integer",
              "enum": [1,2,3,4,5,6,7,8,9]
            }
          }
        } ],        
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserVerifyUploadPhoto"
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              },
              "Set-Cookie" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer"
                        }                        
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },   
    "/backstage/real_verify/photo/{userId}": {
      "get" : {
        "tags" : [ "userVerifyPhoto" ],
        "summary" : "Logs user into the system",
        "operationId" : "getBackstageUserVerifyPhoto",
        "parameters" : [ 
          {
            "name" : "userId",
            "in" : "path",
            "schema" : {
              "type" : "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name" : "type",
            "in" : "query",
            "schema" : {
              "type" : "integer"
            },
            "required": true
          }                              
        ],          
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/RealVerify"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },    
    "/backstage/users": {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "backstage",
        "operationId" : "readManyUserBackstage",
        "parameters" : [ 
          {
            "name" : "orderBy",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "desc"
            }
          },
          {
            "name" : "orderByField",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "createdAt"
            }
          },
          {
            "name" : "page",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 0
            }            
          },
          {
            "name" : "take",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 10
            }    
          }                   
        ],            
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageUserArray"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      } 
    },   
    "/backstage/agents": {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "backstage",
        "operationId" : "getUserBackstageAgents",
        "parameters" : [ 
          {
            "name" : "orderBy",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "desc"
            }
          },
          {
            "name" : "orderByField",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "createdAt"
            }
          },
          {
            "name" : "page",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 0
            }            
          },
          {
            "name" : "take",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 10
            }    
          }                   
        ],            
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageUserArray"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      } 
    },       
    "/backstage/user/{id}": {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "readOneBackstageUser", 
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "schema" : {
              "type" : "string",
              "format": "uuid"
            },
            "required": true
          }                   
        ],                     
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageUser"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "UpdateUserStatusOrRemarkOrRebate",
        "operationId" : "UpdateUserStatusOrRemarkOrRebate", 
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateUserStatusOrRemarkOrRebate"
        },           
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "schema" : {
              "type" : "string",
              "format": "uuid"
            },
            "required": true
          }                   
        ],                     
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageUser"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      }      
    },   
    "/backstage/user/level": {
      "get" : {
        "tags" : [ "userLevel" ],
        "summary" : "Logs user into the system",
        "operationId" : "readManyBackstageUserLevel",                 
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageUserManyLevel"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      },
      "post" : {
        "tags" : [ "userLevel" ],
        "summary" : "Logs user into the system",
        "operationId" : "createOneBackstageUserLevel", 
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "schema" : {
              "type" : "integer"
            },
            "required": true
          }                   
        ],          
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateUserLevel"
        },                   
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageUserLevel"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      }          
    },     
    "/backstage/user/level/{id}": {
      "put" : {
        "tags" : [ "userLevel" ],
        "summary" : "Logs user into the system",
        "operationId" : "updateOneBackstageUserLevel", 
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateUserLevel"
        },           
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "schema" : {
              "type" : "integer"
            },
            "required": true
          }                   
        ],                     
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageUser"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      },
      "delete" : {
        "tags" : [ "userLevel" ],
        "summary" : "Logs user into the system",
        "operationId" : "deleteOneBackstageUserLevel", 
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "schema" : {
              "type" : "integer"
            },
            "required": true
          }                   
        ],                     
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageUser"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      }          
    },    
    "/backstage/user/{id}/transaction": {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "readBackstageUserTransaction", 
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "schema" : {
              "type" : "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name" : "orderBy",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "desc"
            }
          },
          {
            "name" : "orderByField",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "createdAt"
            }
          },
          {
            "name" : "page",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 0
            }            
          },
          {
            "name" : "take",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 10
            }    
          },          
          {
            "name" : "start_time",
            "in" : "query",
            "schema" : {
              "type" : "string",
              "format" : "date-time",
              "default": "2022-09-13T02:26:29.050Z"
            }    
          },
          {
            "name" : "end_time",
            "in" : "query",
            "schema" : {
              "type" : "string",
              "format" : "date-time",
              "default": "2022-09-12T02:26:29.050Z"
            }    
          }                 
        ],                     
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageUserTransaction"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      }
    },        
    "/backstage/user/verify/{id}": {   
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "updateBackstageUser", 
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "schema" : {
              "type" : "string",
              "format": "uuid"
            },
            "required": true
          }                   
        ],        
        "requestBody" : {
          "$ref" : "#/components/requestBodies/BackstageUserVerifyUpdate"
        },                     
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer"
                        }                        
                      }
                    }
                  }
                },
                "example": {
                  "result": {
                        "address": 1,
                        "birthdate": 1,
                        "certificate": 1,
                        "country": 1,
                        "gameUid": 1,
                        "lineId": 1,
                        "id": 9,
                        "idCardDate": 1,
                        "idCardPhoto": 1,
                        "idCardPosiition": 1,
                        "idCardType": 1,
                        "name": 2,
                        "selfie": 1,
                        "sign": 1,
                        "updatedAt": "2022-09-12T11:23:15.496Z",
                        "userId": "040c02b9-dd39-4662-97ec-477f8965c059"
                    }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      }     
    }, 
    "/backstage/user/verify/reson": {   
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "readBackstageUserReson", 
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ResonDes"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      },  
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "createBackstageUserReson",
        "requestBody":{
          "content": {
            "application/json" : {
              "schema" : {
                "type": "object",
                "properties": {
                  "des": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },           
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ResonDes"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      }                    
    },   
    "/backstage/user/verify/reson/{resonId}": {   
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "updateBackstageUserReson", 
        "parameters" : [ 
          {
            "name" : "resonId",
            "in" : "path",
            "schema" : {
              "type" : "integer"
            },
            "required": true
          }                   
        ],    
        "requestBody":{
          "content": {
            "application/json" : {
              "schema" : {
                "type": "object",
                "properties": {
                  "des": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },     
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ResonDes"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      },  
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "deleteBackstageUserReson", 
        "parameters" : [ 
          {
            "name" : "resonId",
            "in" : "path",
            "schema" : {
              "type" : "integer"
            },
            "required": true
          }                   
        ],           
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ResonDes"
          },          
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        }
      }                     
    },                   
    "/user/{id}": {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "updateOneyUser", 
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "schema" : {
              "type" : "string",
              "format": "uuid"
            },
            "required": true
          }                   
        ],                     
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer"
                        }                        
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },          
          "409" : {
            "description": "bank account duplicate"
          }          
        },
        "security" : [{
          "cookieAuth" : []
        }]
      }     
    }, 
    "/user/my/status": {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "getUserMyStatus",
        "operationId" : "getUserMyStatus",                  
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "Set-Cookie" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "jwt"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result": {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "$ref": "#/components/schemas/User/properties/id"
                        },
                        "userStatus" : {
                          "$ref": "#/components/schemas/User/properties/userStatus"
                        }                        
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }        
        },
        "security" : [{
          "cookieAuth" : []
        }]
      }     
    },   
    "/transaction" : {     
      "post" : {
        "tags" : [ "transaction" ],
        "summary" : "createTransaction",
        "operationId" : "createTransaction",    
        "requestBody" : {
          "$ref" : "#/components/requestBodies/CreateTransaction"
        },           
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Transaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [{
          "cookieAuth" : [ ]
        }]
      }
    },
    "/transaction/calculation" : {     
      "post" : {
        "tags" : [ "transaction" ],
        "summary" : "getTransactionCalculation",
        "operationId" : "getTransactionCalculation",    
        "requestBody" : {
          "$ref" : "#/components/requestBodies/GetTransactionCalculation"
        },           
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GetTransactionCalculation"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },    
    "/transaction/my" : {
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "Get transaction by id",
        "operationId" : "readMyTransaction",
        "parameters" : [ 
          {
            "name" : "orderBy",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "desc"
            }
          },
          {
            "name" : "orderByField",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "createdAt"
            }
          },
          {
            "name" : "page",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 0
            }            
          },
          {
            "name" : "take",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 10
            }    
          },
          {
            "name" : "start_time",
            "in" : "query",
            "schema" : {
              "type" : "string",
              "format" : "date-time",
              "default": "2022-09-13T02:26:29.050Z"
            }    
          },
          {
            "name" : "end_time",
            "in" : "query",
            "schema" : {
              "type" : "string",
              "format" : "date-time",
              "default": "2022-09-12T02:26:29.050Z"
            }    
          },
          {
            "name" : "state",
            "in" : "query",
            "schema" : {
              "type" : "string",
              "format" : "int32",
              "description" : "status map:\n  * `failed` - Failed\n * `all` - All\n * `pending` - Pending\n * `processing` - Processing\n",
              "enum" : ["failed", "all", "pending", "processing", "completed"]     
            }    
          },
          {
            "name" : "bos",
            "in" : "query",
            "description" : "status map:\n * `3` - All \n * `1` - Buy\n * `2` - Sell\n",
            "schema" : {
              "type" : "integer",
              "format" : "int32",
              "enum" : [ 1, 2, 3 ]
            }
          }                                                  
        ],        
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MyTransaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },    
    "/transaction/pay_photo" : {
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "Get transaction by id",
        "operationId" : "getPayPhoto",   
        "parameters" : [ 
          {
            "name" : "type",
            "in" : "query",
            "required" : true,
            "description": "status map:\n * `1` - line pay\n * `2` - 街口支付\n",
            "schema" : {
              "type" : "integer",
              "enum": [1, 2]
            }
          },
          {
            "name" : "transactionId",
            "in" : "query",
            "required" : true,
            "schema" : {
              "type" : "string",
              "format": "uuid"
            }
          }
        ],         
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Transaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },   
    "/transaction/gs_pay/deposit" : {
      "post" : {
        "tags" : [ "transaction" ],
        "summary" : "Get transaction by id",
        "operationId" : "postGSPayDeposit",   
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PostGSPayDeposit"
        },         
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "result": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },          
    "/transaction/{id}" : {
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "Get transaction by id",
        "operationId" : "readOneTransaction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format": "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Transaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "transaction" ],
        "summary" : "Update transaction by id",
        "operationId" : "updateTransaction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format": "uuid"
          }
          
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UpdateTransaction"
        },        
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Transaction"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }      
    },
    "/transaction/exchange_rate/buy" : {     
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "get exchang rate",
        "operationId" : "getExchangeRateBuy",      
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageExchangeRateArrayBuy"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },   
    "/transaction/exchange_rate/sell" : {     
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "get exchang rate",
        "operationId" : "getExchangeRateSell",         
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageExchangeRateArraySell"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },       
    "/backstage/exchange_rate/buy" : {     
      "get" : {
        "tags" : [ "exchangeRateBuy" ],
        "summary" : "get exchang rate",
        "operationId" : "readManyBackstageExchangeRateBuy",       
        "parameters" : [ 
          {
            "name" : "orderBy",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "desc"
            }
          },
          {
            "name" : "orderByField",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "createdAt"
            }
          },
          {
            "name" : "page",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 0
            }            
          },
          {
            "name" : "take",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 10
            }    
          }      
        ],                   
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/BackstageExchangeRateArrayBuy"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "exchangeRateBuy" ],
        "summary" : "cteate exchang rate",
        "operationId" : "createOneBackstageExchangeRateBuy",   
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExchangeRateBuy"
        },                 
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/BackstageExchangeRateArrayBuy"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }      
    }, 
    "/backstage/exchange_rate/buy/{id}" : {     
      "put" : {
        "tags" : [ "exchangeRateBuy" ],
        "summary" : "get exchang rate",
        "operationId" : "updateOneBackstageExchangeRateBuy",            
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],       
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExchangeRateBuy"
        },
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/BackstageExchangeRateArrayBuy"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "exchangeRateBuy" ],
        "summary" : "get exchang rate",
        "operationId" : "deleteOneBackstageExchangeRateBuy",            
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],        
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/BackstageExchangeRateArrayBuy"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }      
    },  
    "/backstage/exchange_rate/sell" : {     
      "get" : {
        "tags" : [ "exchangeRateSell" ],
        "summary" : "get exchang rate",
        "operationId" : "readManyBackstageExchangeRateSell",       
        "parameters" : [ 
          {
            "name" : "orderBy",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "desc"
            }
          },
          {
            "name" : "orderByField",
            "in" : "query",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "schema" : {
              "type" : "string",
              "default": "createdAt"
            }
          },
          {
            "name" : "page",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 0
            }            
          },
          {
            "name" : "take",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "default": 10
            }    
          }       
        ],                   
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/BackstageExchangeRateArraySell"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "exchangeRateSell" ],
        "summary" : "cteate exchang rate",
        "operationId" : "createOneBackstageExchangeRateSell",   
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExchangeRateSell"
        },                 
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/BackstageExchangeRateArraySell"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }      
    },     
    "/backstage/exchange_rate/sell/{id}" : {     
      "put" : {
        "tags" : [ "exchangeRateSell" ],
        "summary" : "get exchang rate",
        "operationId" : "updateOneBackstageExchangeRateSell",            
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],       
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExchangeRateSell"
        },
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/BackstageExchangeRateArraySell"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "exchangeRateSell" ],
        "summary" : "get exchang rate",
        "operationId" : "deleteOneBackstageExchangeRateSell",            
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],        
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/BackstageExchangeRateArraySell"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }      
    },  
    "/backstage/transaction/setting" : {     
      "get" : {
        "tags" : [ "transactionSetting" ],
        "summary" : "get exchang rate",
        "operationId" : "getAllSetting",            
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/TransactionSetting"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "transactionSetting" ],
        "summary" : "get exchang rate",
        "operationId" : "updateSetting",    
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UpdateOneSetting"
        },                     
        "responses" : {
          "200" : {
            "$ref":  "#/components/responses/TransactionSetting"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }      
    },           
    "/bank" : {     
      "post" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "createBankAccounts",   
        "requestBody": {
          "$ref": "#/components/requestBodies/BankAccountCreate"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BankAccountFromId"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }
    },        
    "/bank/{id}" : {     
      "get" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "readOneBankAccount",      
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "description" : "The name that needs to be fetched. Use user1 for testing.",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          }
        ],               
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BankAccountFromId"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }

    },    
    "/bank/my/accounts" : {     
      "get" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "getMyBankAccounts",      
        "parameters" : [ 
          {   
            "name" : "status",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "enum": [1,2],
              "default": 1,
              "description" : "status map:\n * `1` - 未驗證\n * `2` - 已驗證\n",
              "nullable": true
            }
          }
        ],               
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BankAccount"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        },
        "security" : [ {
          "cookieAuth" : [ ]
        } ]
      }

    },
    "/backstage/banks/verify/{userId}" : {     
      "get" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "getBackstageBankAccounts",             
        "parameters" : [ 
          {
            "name" : "userId",
            "in" : "path",
            "description" : "User id",
            "required" : true,
            "schema" : {
              "type" : "string",
              "format": "uuid"
            }
          }
        ],           
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageBankAccountArray"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "putBackstageBankAccounts",                       
        "parameters" : [ 
          {
            "name" : "userId",
            "in" : "path",
            "description" : "User id",
            "required" : true,
            "schema" : {
              "type" : "string",
              "format": "uuid"
            }
          }
        ],          
        "requestBody" : {
          "$ref" : "#/components/requestBodies/BackstageBankAccountVerifyUpdate"
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageBankAccountArray"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }      
    },
    "/backstage/banks/verify/reson" : {     
      "get" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "getBackstageBankAccountReson",                   
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ResonDes"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "createBackstageBankAccountsReson",                            
        "requestBody":{
          "content": {
            "application/json" : {
              "schema" : {
                "type": "object",
                "properties": {
                  "des": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },        
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ResonDes"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }      
    },  
    "/backstage/banks/verify/reson/{resonId}" : {     
      "put" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "updateBackstageBankAccountReson",             
        "parameters" : [ 
          {
            "name" : "resonId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          }
        ],           
        "requestBody":{
          "content": {
            "application/json" : {
              "schema" : {
                "type": "object",
                "properties": {
                  "des": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },           
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ResonDes"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "bankAccount" ],
        "summary" : "get account",
        "operationId" : "deleteBackstageBankAccountReson",                       
        "parameters" : [ 
          {
            "name" : "resonId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          }
        ],          
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ResonDes"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }      

    },         
    "/backstage/pay_manage" : {     
      "get" : {
        "tags" : [ "payManage" ],
        "summary" : "get account",
        "operationId" : "readManyBackstagePayManage",   
        "parameters" : [ 
          {
            "name" : "page",
            "in" : "query",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          },
          {
            "name" : "take",
            "in" : "query",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          },
          {
            "name" : "type",
            "in" : "query",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          },  
          {
            "name" : "userId",
            "in" : "query",
            "schema" : {
              "type" : "string"
            }
          }                                    
        ],                             
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReadManyPayManage"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "payManage" ],
        "summary" : "get account",
        "operationId" : "careateBackstagePayManage",                              
        "requestBody" : {
          "$ref" : "#/components/requestBodies/CreatePayManage"
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageBankAccountArray"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }      
    },
    "/backstage/pay_manage/{id}" : {     
      "put" : {
        "tags" : [ "payManage" ],
        "summary" : "get account",
        "operationId" : "updateBackstagePayManage",                       
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "description" : "id",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          }
        ],          
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UpdatePayManage"
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageBankAccountArray"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "payManage" ],
        "summary" : "get account",
        "operationId" : "deleteOneBackstagePayManage",                       
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "description" : "User id",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          }
        ],            
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageBankAccountArray"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }              
    },    
    "/backstage/pay_manage/photo/{id}" : {     
      "post" : {
        "tags" : [ "payManage" ],
        "summary" : "get account",
        "operationId" : "uploadManyQrCode",                       
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "description" : "id",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          }
        ],          
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UploadPhotoQRCode"
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageBankAccountArray"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "payManage" ],
        "summary" : "get account",
        "operationId" : "deleteQrCode",                       
        "parameters" : [ 
          {
            "name" : "id",
            "in" : "path",
            "description" : "User id",
            "required" : true,
            "schema" : {
              "type" : "integer"
            }
          }
        ],                       
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/BackstageBankAccountArray"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }                
    },
    "/backstage/admin" : {     
      "post" : {
        "tags" : [ "backstageAdmin" ],
        "summary" : "get account",
        "operationId" : "getAdminFromId",                              
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                  "type" : "object",
                  "properties" : {              
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
              }
            }
          },
          "description" : "List of user object",
          "required" : true
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AdminDetail"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    },    
    "/backstage/admin/register" : {     
      "post" : {
        "tags" : [ "backstageAdmin" ],
        "summary" : "get account",
        "operationId" : "adminRegister",                            
        "requestBody" : {
          "$ref" : "#/components/requestBodies/AdminLogin"
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AdminDetail"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    },      
    "/backstage/admin/login" : {     
      "post" : {
        "tags" : [ "backstageAdmin" ],
        "summary" : "get account",
        "operationId" : "adminLogin",                            
        "requestBody" : {
          "$ref" : "#/components/requestBodies/AdminLogin"
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AdminDetail"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    },
    "/chatroom/transaction/token" : {     
      "post" : {
        "tags" : [ "chatroom" ],
        "summary" : "get token",
        "operationId" : "transactionToken",                            
        "requestBody" : {
          "$ref" : "#/components/requestBodies/GetTransactionChatToken"
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Token"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    },
    "/chatroom/transaction/service/token" : {     
      "post" : {
        "tags" : [ "chatroom" ],
        "summary" : "get token",
        "operationId" : "transactionServiceToken",                            
        "requestBody" : {
          "$ref" : "#/components/requestBodies/GetTransactionChatToken"
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Token"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    },    
    "/chatroom/user/token" : {     
      "post" : {
        "tags" : [ "chatroom" ],
        "summary" : "get token",
        "operationId" : "userToken",                            
        "requestBody" : {
          "$ref" : "#/components/requestBodies/GetServiceChatToken"
        },              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Token"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    }, 
    "/cashFlow/notify/take_number" : {     
      "post" : {
        "tags" : [ "cashFlow" ],
        "summary" : "get token",
        "operationId" : "notifyTakeNumber",   
        "requestBody" : {
          "$ref" : "#/components/requestBodies/NotifyTakeNumber"
        },                                              
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Token"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    },
    "/cashFlow/notify/paid" : {     
      "post" : {
        "tags" : [ "cashFlow" ],
        "summary" : "get token",
        "operationId" : "notifyPaid",    
        "requestBody" : {
          "$ref" : "#/components/requestBodies/NotifyPaid"
        },                                             
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Token"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    },
    "/cashFlow/notify/grant" : {     
      "post" : {
        "tags" : [ "cashFlow" ],
        "summary" : "get token",
        "operationId" : "notifyGrant",    
        "requestBody" : {
          "$ref" : "#/components/requestBodies/NotifyGrant"
        },                                             
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Token"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    },
    "/cashFlow/custom/page" : {     
      "post" : {
        "tags" : [ "cashFlow" ],
        "summary" : "get token",
        "operationId" : "customPage",                                    
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Token"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    },    
    "/cashFlow/take_number_success" : {     
      "get" : {
        "tags" : [ "cashFlow" ],
        "summary" : "get token",
        "operationId" : "takeNumberSuccess",                     
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Token"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }               
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  },
  "components" : {
    "schemas" : {
      "User" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 30,
            "nullable" : true
          },
          "phonePrefix" : {
            "description": "國碼",
            "type" : "string",
            "example": "886"
          },
          "phone" : {
            "type" : "string",
            "example": "945372644"
          },               
          "password" : {
            "type" : "string",
            "minLength" : 8,
            "maxLength" : 30,
            "example": "ffE22sqwjbw"
          },
          "userStatus" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "status map:\n * `1` - Verified\n * `2` - Unverified\n * `3` - WaitVerify\n * `4` - Failed\n * `9` - Test account \n * `10` - Agent \n * `11` - AgentLocking \n",
            "enum" : [ 1, 2, 3, 4 ],
            "default" : 2
          },    
          "isAgent" : {
            "type" : "boolean",
            "default": "false"
          },      
          "gameUid" : {
            "type" : "string",
            "nullable" : true
          },      
          "lineId" : {
            "type" : "string",
            "nullable" : true
          },          
          "birthdate" : {
            "type" : "string",
            "format" : "date",
            "nullable" : true
          },   
          "country" : {
            "description": "residence country",
            "type" : "string",
            "nullable" : true
          },  
          "idCard" : {
            "type" : "string",
            "nullable" : true
          },       
          "idCardDate" : {
            "type" : "string",
            "nullable" : true
          },       
          "idCardPosiition" : {
            "type" : "string",
            "nullable" : true
          },   
          "idCardType" : {
            "type" : "integer",
            "nullable" : true,
            "enum": [1,2,3],
            "description" : "status map:\n * `1` - 初\n * `2` - 補\n * `3` - 換\n"
          },                                 
          "city" : {
            "description": "residence city",
            "type" : "string",
            "nullable" : true
          },    
          "area" : {
            "description": "residence area",
            "type" : "string",
            "nullable" : true
          },     
          "address" : {
            "description": "residence address",
            "type" : "string",
            "nullable" : true
          },                   
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          },        
          "level" : {
            "$ref" : "#/components/schemas/UserLevel/properties/level"
          },
          "userLevel" : {
            "$ref" : "#/components/schemas/UserLevel",
            "default": 2
          },
          "firstBonus" : {
            "type": "boolean",
            "default": true
          },
          "firstBonusTemp" : {
            "type": "boolean",
            "default": true
          },                
          "remark": {
            "type" : "string",
            "nullable": true
          },
          "linePay": {
            "type" : "string",
            "nullable": true
          }          
        }
      }, 
      "Referral" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "userId": {
            "$ref" : "#/components/schemas/User/properties/id",
            "unique": true
          },  
          "rebate" : {
            "type" : "number",
            "format" : "decimal",
            "pattern": "^\\d{2}.\\d{2}$",
            "precision": 4,
            "scale": 2
          }        
        }
      },   
      "ReferralMap" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "referralId": {
            "$ref" : "#/components/schemas/Referral/properties/id"
          },        
          "userId": {
            "$ref" : "#/components/schemas/User/properties/id",
            "unique": true
          }           
        }
      },                 
      "UserLevel" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "level" : {
            "type" : "integer",
            "uniqueItems": true,
            "default": 1
          },
          "des" : {
            "type" : "string",
            "nullable": true
          }          
        }
      },            
      "UserVerifyPhoto" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },    
          "type": {
            "type" : "integer"
          },            
          "path": {
            "type" : "string"
          },      
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }, 
          "userId" : {
            "$ref" : "#/components/schemas/User/properties/id"
          }
        }
      },
      "UserVerify" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },
          "lineId" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },     
          "gameUid" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },                  
          "birthdate" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },   
          "country" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },     
          "address" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },
          "city" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },
          "area" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },                    
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          },       
          "idCard" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },                
          "idCardDate" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },       
          "idCardPosiition" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },   
          "idCardType" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },   
          "idCardPhoto" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },             
          "selfie" : {
            "type" : "integer",
            "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
            "enum": [1,2,3],
            "default": 1
          },                                                                  
          "userId" : {
            "$ref" : "#/components/schemas/User/properties/id",
            "unique": true
          },
          "userVerifyResonDes": {
            "$ref" : "#/components/schemas/UserVerifyResonDes"
          }
        }
      },   
      "UserVerifyResonDes" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },  
          "userVerifyId" : {
            "$ref" : "#/components/schemas/UserVerify/properties/id"
          },    
          "field":{
            "type": "string",
            "enum": [
              "name", 
              "phonePrefix", 
              "phone", 
              "lineId",
              "gameUid",
              "birthdate",
              "country", 
              "idCardDate", 
              "idCardPosiition", 
              "idCardType", 
              "idCardPhoto", 
              "certificate",
              "selfie",
              "sign",
              "address"
            ]
          },     
          "UserVerifyResonId" : {
            "$ref" : "#/components/schemas/UserVerifyReson/properties/id"
          },
          "userVerifyReson" : {
            "$ref" : "#/components/schemas/UserVerifyReson"
          }        
        }
      },          
      "UserVerifyReson" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "des" : {
            "type" : "string"
          }          
        }
      },           
      "BankAccount" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "integer"
          },         
          "account" : {
            "type" : "integer",
            "format" : "int64"
          }, 
          "status" : {
            "type" : "integer",
            "enum": [1,2],
            "default": 1,
            "description" : "status map:\n * `1` - 未驗證\n * `2` - 已驗證\n"
          }, 
          "order" : {
            "type" : "integer",
            "enum": [1,2,3],
            "description" : "最多三組"
          },           
          "userId" : {
            "$ref" : "#/components/schemas/User/properties/id"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }                        
        }
      },
      "BankAccountVerify" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "integer"
          },
          "code" : {
            "type" : "integer"
          },         
          "account" : {
            "type" : "integer"
          }, 
          "photo" : {
            "type" : "integer"
          },                       
          "bankId" : {
            "$ref" : "#/components/schemas/BankAccount/properties/id",
            "unique": true
          }
        }
      },    
      "BankAccountVerifyResonDes" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },  
          "bankAccountVerifyId" : {
            "$ref" : "#/components/schemas/BankAccountVerify/properties/id"
          },    
          "field":{
            "type": "string",
            "enum": [
              "name", 
              "code", 
              "account"
            ]
          },     
          "bankAccountVerifyResonId" : {
            "$ref" : "#/components/schemas/BankAccountVerifyReson/properties/id"
          },
          "bankAccountVerifyReson" : {
            "$ref" : "#/components/schemas/BankAccountVerifyReson"
          }        
        }
      },          
      "BankAccountVerifyReson" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "des" : {
            "type" : "string"
          }          
        }
      },        
      "Transaction" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "bos" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "status map:\n * `1` - Buy\n * `2` - Sell\n",
            "enum" : [ 1, 2 ]            
          },
          "bonusPoint" : {
            "type" : "integer"
          },  
          "point" : {
            "type" : "integer"
          },                
          "twd" : {
            "type" : "integer"
          },      
          "payMethod" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "status map:\n  * `1` - linePay\n * `2` - 街口支付\n * `3` -超商\n * `4` - ATM\n",
            "enum" : [1, 2, 3, 4, 5]
          },                   
          "state" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "status map:\n  * `99` - Failed\n * `1` - Pending\n * `2` - Pair Completed\n * `3` - Pay or recive Completed\n * `4` - Completed\n",
            "enum" : [1, 2, 3, 4, 99],
            "default": 1
          }, 
          "paid" : {
            "type" : "boolean",
            "default": "false"
          },           
          "timeout": {
            "type" : "boolean",
            "default": "false"
          },
          "appeal": {
            "type" : "boolean",
            "default": "false"
          },                                        
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }, 
          "account" : {
            "type" : "string"
          },      
          "userId" : {
            "$ref" : "#/components/schemas/User/properties/id"
          },
          "bankName" : {
            "type" : "string"
          },          
          "bankCode" : {
            "type" : "integer"
          },         
          "bankAccount" : {
            "type" : "integer",
            "format": "int64"
          },           
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "handlingFee" : {
            "type" : "integer"
          },   
          "serviceFee" : {
            "type" : "integer"
          },
          "totalDollars" : {
            "type" : "integer"
          },
          "totalPoints" : {
            "type" : "integer"
          },
          "rebateRate" : {
            "type" : "number",
            "format" : "decimal",
            "pattern": "^\\d{2}.\\d{2}$",
            "precision": 4,
            "scale": 2,
            "nullable": true
          },
          "rebate" : {
            "type" : "integer",
            "nullable": true
          }
        }
      },
      "TransactionRecive" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },                     
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }, 
          "transactionId" : {
            "$ref" : "#/components/schemas/Transaction/properties/id",
            "unique": true
          },
          "transaction" : {
            "$ref" : "#/components/schemas/Transaction"
          },                 
          "userId" : {
            "$ref" : "#/components/schemas/User/properties/id"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }         
        }
      },
      "PayManage" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },  
          "type" : {
            "type" : "integer",
            "description": "status map:\n * `1` - line pay\n * `2` - 街口支付\n",
            "enum": [1, 2]
          },            
          "qrCode" : {
            "type" : "string",
            "default": ""
          },  
          "code" : {
            "type" : "string",
            "default": ""
          },           
          "remark" : {
            "type" : "string",
            "default": ""
          },     
          "status" : {
            "type" : "integer",
            "default": 1,
            "description" : "status map:\n * `1` - 未設定\n * `2` - 目前使用\n * `3` - 停用\n"
          },     
          "userId" : {
            "$ref" : "#/components/schemas/User/properties/id"
          },                            
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }       
        }
      },
      "BackstageAdmin" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "minLength" : 8,
            "maxLength" : 30,
            "nullable" : true
          },    
          "account" : {
            "type" : "string",
            "uniqueItems": true
          },  
          "password" : {
            "type" : "string"
          },     
          "status" : {
            "type" : "integer",
            "default": 1,
            "description" : "status map:\n * `1` - 未設定\n * `2` - 目前使用\n * `3` - 停用\n"
          },                         
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }       
        }
      },        
      "ExchangeRateSell" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },            
          "type" : {
            "type" : "integer",
            "description" : "type map:\n * `1` - 大頭家幣:台幣\n * `2` - 大頭家幣:美金\n",
            "enum" : [ 1, 2 ]               
          },     
          "des" : {
            "type" : "string",
            "description": "描述"
          },  
          "rate" : {
            "type" : "integer",
            "description": "匯率"
          },                       
          "rangeUpper" : {
            "type" : "integer",
            "description": "上限"
          },  
          "rangeLower" : {
            "type" : "integer",
            "description": "下限"
          },                                                                   
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }   
        }
      },
      "ExchangeRateBuy" : {
        "type" : "object",
        "description" : "database",
        "properties" : {
          "id" : {
            "type" : "integer"
          },             
          "type" : {
            "type" : "integer",
            "description" : "type map:\n * `1` - 大頭家幣:台幣\n * `2` - 大頭家幣:美金\n",
            "enum" : [ 1, 2 ]               
          },     
          "des" : {
            "type" : "string",
            "description": "描述"
          },    
          "bouns" : {
            "type" : "integer",
            "description": "贈送點數"
          },  
          "point": {
            "type" : "integer",
            "description": "點數ˋ"
          },           
          "dollars": {
            "type" : "integer",
            "description": "金額"
          },                                                                                  
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }   
        }
      }        
    },
    "requestBodies" : {
      "UserRegister" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "phone" : {
                  "$ref" : "#/components/schemas/User/properties/phone"
                },                                      
                "password" : {
                  "$ref" : "#/components/schemas/User/properties/password"
                },
                "passwordCheck" : {
                  "$ref" : "#/components/schemas/User/properties/password"
                }, 
                "phoneCaptcha" : {
                  "type": "string"
                },                    
                "captcha" : {
                  "type": "string"
                },
                "promoteCode" : {
                  "type": "string"
                }                
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },   
      "UpdateUserStatusOrRemarkOrRebate" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "level" : {
                  "type": "integer",
                  "nullable": true
                },                                      
                "remark" : {
                  "type": "string",
                  "nullable": true
                },
                "rebate" : {
                  "type" : "number",
                  "format" : "decimal",
                  "nullable": true,
                  "pattern": "^\\d{1,2}.\\d{2}$",
                  "precision": 4,
                  "scale": 2
                  
                }                
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "UpdateUserLevel" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "level" : {
                  "type": "integer"
                },                                      
                "des" : {
                  "type": "string"
                }           
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },                        
      "UserRegisterPhoneCheck" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "phone" : {
                  "type": "string"
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },    
      "UserCreateRealVerify" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "minLength" : 1,
                  "maxLength" : 30
                },                                  
                "birthdate" : {
                  "type" : "string",
                  "format" : "date"
                },  
                "gameUid" : {
                  "type" : "string"
                },      
                "lineId" : {
                  "type" : "string"
                }, 
                "country" : {
                  "description": "residence country",
                  "type" : "string"
                },  
                "idCard" : {
                  "type" : "string"
                },       
                "idCardDate" : {
                  "type" : "string"
                },       
                "idCardPosiition" : {
                  "type" : "string"
                },   
                "idCardType" : {
                  "type" : "integer",
                  "enum": [1,2,3],
                  "description" : "status map:\n * `1` - 初\n * `2` - 補\n * `3` - 換\n"
                },      
                "city" : {
                  "description": "residence city",
                  "type" : "string"
                },    
                "area" : {
                  "description": "residence area",
                  "type" : "string"
                },     
                "address" : {
                  "description": "residence address",
                  "type" : "string"
                },
                "linePay" : {
                  "description": "linePay",
                  "type" : "string"
                },
                "bankAccounts": {
                  "type": "array",
                  "items":{
                    "type": "object",
                    "properties": {
                      "order": {
                        "type": "integer",
                        "enum": [1, 2, 3]
                      },
                      "code": {
                        "type": "integer"
                      },
                      "account": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }                                            
                    }
                  }
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },   
      "UserUpdateRealVerify" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "minLength" : 3,
                  "maxLength" : 30
                },
                "gameUid" : {
                  "type" : "string",
                  "nullable" : true
                },      
                "lineId" : {
                  "type" : "string",
                  "nullable" : true
                },                                    
                "birthdate" : {
                  "type" : "string",
                  "format" : "date"
                },  
                "country" : {
                  "description": "residence country",
                  "type" : "string"
                },  
                "idCard" : {
                  "type" : "string"
                },       
                "idCardDate" : {
                  "type" : "string"
                },       
                "idCardPosiition" : {
                  "type" : "string"
                },   
                "idCardType" : {
                  "type" : "integer",
                  "enum": [1,2,3],
                  "description" : "status map:\n * `1` - 初\n * `2` - 補\n * `3` - 換\n"
                },      
                "city" : {
                  "description": "residence city",
                  "type" : "string"
                },    
                "area" : {
                  "description": "residence area",
                  "type" : "string"
                },     
                "address" : {
                  "description": "residence address",
                  "type" : "string"
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },         
      "UserVerifyUploadPhoto" : {
        "content" : {
          "multipart/form-data" : {
            "schema" : {
                "type" : "object",
                "properties" : {              
                  "files" : {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }              
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },   
      "BackstageUserVerifyUpdate" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },        
                "lineId" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },         
                "gameUid" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },                             
                "birthdate" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },
                "country" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },  
                "idCard" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },                               
                "idCardDate" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },  
                "idCardPosiition" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },  
                "idCardType" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },  
                "idCardPhoto" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },  
                "selfie" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },  
                "address" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },
                "city" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },
                "area" : {
                  "type" : "integer",
                  "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                  "enum": [1,2,3]
                },                                
                "nameResonId" : {
                  "type" : "integer",
                  "nullable": true
                },        
                "gameUidResonId" : {
                  "type" : "integer",
                  "nullable": true
                },        
                "lineIdResonId" : {
                  "type" : "integer",
                  "nullable": true
                },                                 
                "birthdateResonId" : {
                  "type" : "integer",
                  "nullable": true
                },
                "areaResonId" : {
                  "type" : "integer",
                  "nullable": true
                },                      
                "cityResonId" : {
                  "type" : "integer",
                  "nullable": true
                },                   
                "countryResonId" : {
                  "type" : "integer",
                  "nullable": true
                },             
                "idCardResonId" : {
                  "type" : "integer",
                  "nullable": true
                },     
                "idCardDateResonId" : {
                  "type" : "integer",
                  "nullable": true
                },  
                "idCardPosiitionResonId" : {
                  "type" : "integer",
                  "nullable": true
                },  
                "idCardTypeResonId" : {
                  "type" : "integer",
                  "nullable": true
                },  
                "idCardPhotoResonId" : {
                  "type" : "integer",
                  "nullable": true
                },  
                "selfieResonId" : {
                  "type" : "integer",
                  "nullable": true
                },  
                "addressResonId" : {
                  "type" : "integer",
                  "nullable": true
                }                                                      
              }
            }
          }
        },
        "required" : true
      },    
      "BackstageBankAccountVerifyUpdate" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "dataList": {
                  "type": "array",
                  "items":{
                    "type" : "object",
                    "properties" : {
                      "verifyId" : {
                        "type" : "integer"
                      },                           
                      "name" : {
                        "type" : "integer",
                        "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                        "enum": [1,2,3]
                      },        
                      "code" : {
                        "type" : "integer",
                        "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                        "enum": [1,2,3]
                      },                                  
                      "account" : {
                        "type" : "integer",
                        "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                        "enum": [1,2,3]
                      },
                      "photo" : {
                        "type" : "integer",
                        "description": "* `1` - 審核中\n * `2` - 通過驗證\n * `3` - 驗證失敗\n",
                        "enum": [1,2,3]
                      },   
                      "nameResonId" : {
                        "type" : "integer",
                        "nullable": true
                      },
                      "codeResonId" : {
                        "type" : "integer",
                        "nullable": true
                      },
                      "accountResonId" : {
                        "type" : "integer",
                        "nullable": true
                      },   
                      "photoResonId" : {
                        "type" : "integer",
                        "nullable": true
                      }                                                                                                             
                    }                
                  }                  
                }
              }
            }
          }
        },
        "required" : true
      },    
      "UpdateOneSetting" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "firstReward" : {
                  "type": "integer"
                },  
                "atmHandlingFee" : {
                  "type": "integer"
                }, 
                "barCodeHandlingFee" : {
                  "type": "integer"
                },                 
                "serviceFee" : {
                  "type": "integer"
                }                                                                                                                
              }
            }
          }
        },
        "required" : true
      },          
      "User" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "$ref" : "#/components/schemas/User/properties/name"
                },
                "password" : {
                  "$ref" : "#/components/schemas/User/properties/password"
                },
                "phone" : {
                  "$ref" : "#/components/schemas/User/properties/phone"
                },
                "userStatus" : {
                  "$ref" : "#/components/schemas/User/properties/userStatus",
                  "nullable" : true
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "BankAccountCreate": {
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties" : {
                "data" : {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties" : {
                      "name" : {
                        "$ref" : "#/components/schemas/BankAccount/properties/name"
                      },
                      "code" : {
                        "$ref" : "#/components/schemas/BankAccount/properties/code"
                      },
                      "account" : {
                        "$ref" : "#/components/schemas/BankAccount/properties/account"
                      },
                      "order" : {
                        "$ref" : "#/components/schemas/BankAccount/properties/order"
                      }                    
                    }
                  }
                }                
              }              
            }
          }
        },
        "description" : "List of user object"
      },
      "UserArray" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "dataList": {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "$ref" : "#/components/schemas/User/properties/name"
                    },
                    "password" : {
                      "$ref" : "#/components/schemas/User/properties/password"
                    },
                    "phone" : {
                      "$ref" : "#/components/schemas/User/properties/phone"
                    },
                    "userStatus" : {
                      "$ref" : "#/components/schemas/User/properties/userStatus"
                    }
                  }
                }                  
                }

              }

            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "CreateExchangeRateBuy" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {  
                "type" : {
                  "$ref" : "#/components/schemas/ExchangeRateBuy/properties/type"
                },  
                "des" : {
                  "$ref" : "#/components/schemas/ExchangeRateBuy/properties/des"
                },                                        
                "bouns" : {
                  "$ref" : "#/components/schemas/ExchangeRateBuy/properties/bouns"
                },  
                "point" : {
                  "$ref" : "#/components/schemas/ExchangeRateBuy/properties/point"
                },       
                "dollars" : {
                  "$ref" : "#/components/schemas/ExchangeRateBuy/properties/dollars"
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },        
      "CreateExchangeRateSell" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : { 
                "type" : {
                  "$ref" : "#/components/schemas/ExchangeRateSell/properties/type"
                },  
                "des" : {
                  "$ref" : "#/components/schemas/ExchangeRateSell/properties/des"
                },                                       
                "rate" : {
                  "$ref" : "#/components/schemas/ExchangeRateSell/properties/rate"
                },  
                "rangeUpper" : {
                  "$ref" : "#/components/schemas/ExchangeRateSell/properties/rangeUpper"
                },       
                "rangeLower" : {
                  "$ref" : "#/components/schemas/ExchangeRateSell/properties/rangeLower"
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },           
      "UpdateExchangeRateBuy" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "des" : {
                  "$ref" : "#/components/schemas/ExchangeRateBuy/properties/des"
                },                                       
                "dollars" : {
                  "$ref" : "#/components/schemas/ExchangeRateBuy/properties/dollars"
                },  
                "bouns" : {
                  "$ref" : "#/components/schemas/ExchangeRateBuy/properties/bouns"
                },  
                "point" : {
                  "$ref" : "#/components/schemas/ExchangeRateBuy/properties/point"
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },       
      "UpdateExchangeRateSell" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "des" : {
                  "$ref" : "#/components/schemas/ExchangeRateSell/properties/des"
                },                                       
                "rate" : {
                  "$ref" : "#/components/schemas/ExchangeRateSell/properties/rate"
                },  
                "rangeUpper" : {
                  "$ref" : "#/components/schemas/ExchangeRateSell/properties/rangeUpper"
                },       
                "rangeLower" : {
                  "$ref" : "#/components/schemas/ExchangeRateSell/properties/rangeLower"
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },            
      "CreateTransaction" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "bos" : {
                  "$ref" : "#/components/schemas/Transaction/properties/bos"
                },    
                "buyOptionId" : {
                  "type": "integer",
                  "nullable": true
                },    
                "point" : {
                  "type": "integer",
                  "nullable": true
                }, 
                "payMethod": {
                  "$ref" : "#/components/schemas/Transaction/properties/payMethod"
                },
                "bankId" : {
                  "type": "integer",
                  "nullable": true
                },  
                "image" : {
                  "type": "string",
                  "nullable": true
                },
                "code" : {
                  "type": "string",
                  "nullable": true
                }                               
              }
            }
          }
        },
        "required" : true
      },
      "GetTransactionCalculation" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "bos" : {
                  "$ref" : "#/components/schemas/Transaction/properties/bos"
                },    
                "buyOptionId" : {
                  "type": "integer",
                  "nullable": true
                },    
                "point" : {
                  "type": "integer",
                  "nullable": true
                }, 
                "payMethod": {
                  "$ref" : "#/components/schemas/Transaction/properties/payMethod"
                }
              }
            }
          }
        },
        "required" : true
      },      
      "UpdateTransaction" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "state" : {
                  "$ref" : "#/components/schemas/Transaction/properties/state"
                }
              }
            }
          }
        },
        "required" : true
      },
      "CreatePayManage" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type": "integer"
                },
                "userId" : {
                  "type": "string",
                  "format": "uuid"
                }            
              }
            }
          }
        },
        "required" : true
      },
      "UpdatePayManage" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "code" : {
                  "$ref" : "#/components/schemas/PayManage/properties/code"
                },
                "remark" : {
                  "$ref" : "#/components/schemas/PayManage/properties/remark"
                },
                "status" : {
                  "$ref" : "#/components/schemas/PayManage/properties/status"
                }              
              }
            }
          }
        },
        "required" : true
      },      
      "UploadPhotoQRCode" : {
        "content" : {
          "multipart/form-data" : {
            "schema" : {
                "type" : "object",
                "properties" : {              
                  "files" : {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }              
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "AdminLogin" : {
        "content" : {
          "application/json" : {
            "schema" : {
                "type" : "object",
                "properties" : {              
                  "account": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      }, 
      "GetTransactionChatToken" : {
        "content" : {
          "application/json" : {
            "schema" : {
                "type" : "object",
                "properties" : {              
                  "transactionId": {
                    "type": "string"
                  }
                }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "GetServiceChatToken" : {
        "content" : {
          "application/json" : {
            "schema" : {
                "type" : "object",
                "properties" : {              
                  "userId": {
                    "type": "string"
                  }
                }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "PostGSPayDeposit" : {
        "content" : {
          "application/json" : {
            "schema" : {
                "type" : "object",
                "properties" : {              
                  "type": {
                    "type" : "integer",
                    "enum": [3, 4]
                  },
                  "transactionId": {
                    "type" : "string"
                  }                  
                }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },      
      "NotifyTakeNumber" : {
        "content" : {
          "application/json" : {
            "schema" : {
                "type" : "object",
                "properties" : {              
                  "Amount": {
                    "type": "string"
                  },
                  "MemberOrderNo": {
                    "type": "string"
                  },
                  "OrderNo": {
                    "type": "string"
                  },
                  "Status": {
                    "type": "string"
                  },
                  "DueTime": {
                    "type": "string"
                  },
                  "BankName": {
                    "type": "string",
                    "nullable": true
                  },
                  "PaymentInfo": {
                    "type": "string"
                  },
                  "Sign": {
                    "type": "string"
                  }
                }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "NotifyPaid" : {
        "content" : {
          "application/json" : {
            "schema" : {
                "type" : "object",
                "properties" : {              
                  "Amount": {
                    "type": "string"
                  },
                  "MemberOrderNo": {
                    "type": "string"
                  },
                  "OrderNo": {
                    "type": "string"
                  },
                  "Status": {
                    "type": "string"
                  },
                  "Bank": {
                    "type": "string",
                    "nullable": true
                  },
                  "Account": {
                    "type": "string",
                    "nullable": true
                  },
                  "Sign": {
                    "type": "string"
                  }
                }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },   
      "NotifyGrant" : {
        "content" : {
          "application/json" : {
            "schema" : {
                "type" : "object",
                "properties" : {              
                  "Amount": {
                    "type": "integer"
                  },
                  "MemberOrderNo": {
                    "type": "string"
                  },
                  "OrderNo": {
                    "type": "string"
                  },
                  "Status": {
                    "type": "string"
                  },
                  "Fee": {
                    "type": "integer"
                  },
                  "Sign": {
                    "type": "string"
                  }
                }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      }                                                   
    },
    "parameters" : {
      "createdAt" : {
        "name" : "createdAt",
        "in" : "query",
        "description" : "number of items to skip",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "updatedAt" : {
        "name" : "updatedAt",
        "in" : "query",
        "description" : "number of items to skip",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "responses" : {
      "User" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "name" : {
                  "type" : "string"
                },
                "phone" : {
                  "type" : "string",
                  "format" : "phone",
                  "nullable" : true
                },
                "createdAt" : {
                  "type" : "string",
                  "format" : "date-time"
                },
                "updatedAt" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            }
          }
        }
      },
      "BackstageUser" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "name" : {
                  "type" : "string"
                },
                "birthdate" : {
                  "type" : "string",
                  "format" : "date",
                  "nullable" : true
                },   
                "country" : {
                  "description": "residence country",
                  "type" : "string",
                  "nullable" : true
                },  
                "idCard" : {
                  "type" : "string",
                  "nullable" : true
                },       
                "idCardDate" : {
                  "type" : "string",
                  "nullable" : true
                },       
                "idCardPosiition" : {
                  "type" : "string",
                  "nullable" : true
                },   
                "idCardType" : {
                  "type" : "integer",
                  "nullable" : true,
                  "enum": [1,2,3],
                  "description" : "status map:\n * `1` - 初\n * `2` - 補\n * `3` - 換\n"
                },
                "city" : {
                  "description": "residence city",
                  "type" : "string",
                  "nullable" : true
                },    
                "area" : {
                  "description": "residence area",
                  "type" : "string",
                  "nullable" : true
                },     
                "address" : {
                  "description": "residence address",
                  "type" : "string",
                  "nullable" : true
                },
                "lineId" : {
                  "type" : "string"
                },
                "gameUid" : {
                  "type" : "string"
                },  
                "linePay" : {
                  "type" : "string"
                },
                "userVerifyPhoto": {
                  "type" : "array",
                  "items":{ 
                    "$ref": "#/components/schemas/UserVerifyPhoto"
                  }
                }, 
                "userVerify": {
                  "$ref": "#/components/schemas/UserVerify"
                }  
              }
            }
          }
        }
      },   
      "BackstageUserManyLevel" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "array",
              "items": {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },                
                  "level" : {
                    "type" : "integer"
                  },
                  "des" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      },          
      "BackstageUserLevel" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "integer"
                },                
                "level" : {
                  "type" : "integer"
                },
                "des" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      },            
      "BackstageUserArray" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "$ref" : "#/components/schemas/User/properties/id"
                  },                   
                  "phone" : {
                    "$ref" : "#/components/schemas/User/properties/phone"
                  },                  
                  "phonePrefix" : {
                    "$ref" : "#/components/schemas/User/properties/phonePrefix"
                  },
                  "userStatus" : {
                    "$ref" : "#/components/schemas/User/properties/userStatus"
                  },
                  "level" : {
                    "$ref" : "#/components/schemas/User/properties/level"
                  },
                  "gameUid" : {
                    "$ref" : "#/components/schemas/User/properties/gameUid"
                  },
                  "isAgent" : {
                    "$ref" : "#/components/schemas/User/properties/isAgent"
                  },                  
                  "remark" : {
                    "$ref" : "#/components/schemas/User/properties/remark"
                  }                                                         
                }
              }          
            }
          }
        },
        "description" : "List of user object"
      },      
      "BackstageAgentArray" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "$ref" : "#/components/schemas/User/properties/id"
                  },                   
                  "phone" : {
                    "$ref" : "#/components/schemas/User/properties/phone"
                  },                  
                  "phonePrefix" : {
                    "$ref" : "#/components/schemas/User/properties/phonePrefix"
                  },
                  "userStatus" : {
                    "$ref" : "#/components/schemas/User/properties/userStatus"
                  },
                  "level" : {
                    "$ref" : "#/components/schemas/User/properties/level"
                  },
                  "gameUid" : {
                    "$ref" : "#/components/schemas/User/properties/gameUid"
                  },
                  "remark" : {
                    "$ref" : "#/components/schemas/User/properties/remark"
                  }                                         
                }
              }          
            }
          }
        },
        "description" : "List of user object"
      },       
      "Transaction" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "format" : "uuid"
                },
                "bos" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "status map:\n * `1` - Buy\n * `2` - Sell\n",
                  "enum" : [ 1, 2 ]            
                },
                "bonusPoint" : {
                  "type" : "integer"
                },  
                "point" : {
                  "type" : "integer"
                },                
                "twd" : {
                  "type" : "integer"
                },   
                "state" : {
                  "type" : "integer"
                },                        
                "createdAt" : {
                  "type" : "string",
                  "format" : "date-time"
                }, 
                "account" : {
                  "type" : "string"
                },   
                "payMethod" : {
                  "type" : "integer"
                },                     
                "bankAccount" : {
                  "type" : "integer"
                },   
                "bankCode" : {
                  "type" : "integer"
                },   
                "bankName" : {
                  "type" : "string"
                }, 
                "handlingFee" : {
                  "type" : "integer"
                },   
                "serviceFee" : {
                  "type" : "integer"
                },
                "totalDollars" : {
                  "type" : "integer"
                },
                "totalPoints" : {
                  "type" : "integer"
                },                                       
                "userId" : {
                  "$ref" : "#/components/schemas/User/properties/id"
                },
                "bankId" : {
                  "$ref" : "#/components/schemas/BankAccount/properties/id"
                }                  
              }
            }
          }
        }
      },        
      "GetTransactionCalculation" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "totalPoints": {
                  "type": "number"
                },
                "point": {
                  "type": "number"
                },
                "bonusPoint": {
                  "type": "number"
                }, 
                "firstBonusPoint": {
                  "type": "number"
                },                 
                "totalDollars": {
                  "type": "number"
                },
                "dollars":{
                  "type": "number"
                },
                "handlingFee":{
                  "type": "number"
                },
                "serviceFee":{
                  "type": "number"
                }                
              }              
            }
          }
        }
      },          
      "MyTransaction" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "totalPoint": {
                  "type": "integer"
                },
                "totalBonusPoint": {
                  "type": "integer"
                },
                "totalTWD": {
                  "type": "integer"
                },
                "dataList": {
                  "type": "array",
                  "items": {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                          "type" : "string"
                      },
                      "manufacturer": {
                        "type" : "string"
                      },
                      "serviceCharge": {
                        "type" : "integer"
                      },
                      "bos" : {
                        "type" : "integer",
                        "format" : "int32",
                        "description" : "status map:\n * `1` - Buy\n * `2` - Sell\n",
                        "enum" : [ 1, 2 ]            
                      },
                      "bonusPoint" : {
                        "type" : "integer"
                      },  
                      "point" : {
                        "type" : "integer"
                      },                
                      "twd" : {
                        "type" : "integer"
                      },   
                      "state" : {
                        "type" : "integer"
                      },                        
                      "createdAt" : {
                        "type" : "string",
                        "format" : "date-time"
                      }, 
                      "account" : {
                        "type" : "string"
                      },   
                      "payMethod" : {
                        "type" : "integer"
                      },                     
                      "bankAccount" : {
                        "type" : "integer"
                      },   
                      "bankCode" : {
                        "type" : "integer"
                      },   
                      "bankName" : {
                        "type" : "string"
                      },
                      "gameUid" : {
                        "type" : "string"
                      },
                      "recommod": {
                        "type" : "string"
                      },
                      "counterpartyGameUid" : {
                        "type" : "string"
                      },
                      "appeal" : {
                        "type" : "boolean"
                      },
                      "timeout" : {
                        "type" : "boolean"
                      }
                    }
                  }                  
                }
              }              
            }
          }
        }
      },          
      "BankAccount" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "integer",
                      "format" : "int64"
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "code" : {
                      "type" : "integer"
                    },         
                    "account" : {
                      "type" : "integer"
                    }, 
                    "status" : {
                      "type" : "integer",
                      "enum": [1,2],
                      "default": 1,
                      "description" : "status map:\n * `1` - 未驗證\n * `2` - 已驗證\n"
                    }
                  }                  
                }
              },
              "example":{
                "result" : {
                  "2": {
                    "id": 2,
                    "name": "name",
                    "code": 123456,
                    "account": 1245,
                    "status": 2,
                    "order": 1
                  },
                  "3": {
                    "id": 3,
                    "name": "name2",
                    "code": 123456,
                    "account": 1245,
                    "status": 2,
                    "order": 2
                  }                 
                }
              }
            }
          }
        }
      },   
      "BankAccountFromId" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "integer"
                },                
                "name" : {
                  "type" : "string"
                },
                "code" : {
                  "type" : "integer"
                },         
                "account" : {
                  "type" : "integer"
                },
                "status" : {
                  "type" : "integer"
                },
                "userId" : {
                  "type" : "string"
                }                                       
              }
            }
          }
        }
      },       
      "BackstageBankAccountArray" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "result" : {
                  "type": "array",
                  "items": {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "type" : "integer",
                        "description": "bankId"
                      },
                      "name" : {
                        "type" : "string"
                      },
                      "code" : {
                        "type" : "integer"
                      },         
                      "account" : {
                        "type" : "integer"
                      },   
                      "verifyDes" : {
                        "type": "object",
                        "properties": {
                          "account": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "photo": {
                            "type": "string"
                          }                   
                        }
                      },                                   
                      "verify": {
                        "type": "object",
                        "properties": {
                          "account": {
                            "type": "integer"
                          },
                          "code": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "integer"
                          },
                          "photo": {
                            "type": "integer"
                          }
                        }

                      }  
                    }                
                  }                  
                }
              }
            }
          }
        }
      },      
      "BackstageExchangeRateArrayBuy" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "array",
              "items": {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "$ref" : "#/components/schemas/ExchangeRateBuy/properties/id"
                  },               
                  "type" : {
                    "$ref" : "#/components/schemas/ExchangeRateBuy/properties/type"
                  },  
                  "des" : {
                    "$ref" : "#/components/schemas/ExchangeRateBuy/properties/des"
                  },                                       
                  "bouns" : {
                    "$ref" : "#/components/schemas/ExchangeRateBuy/properties/bouns"
                  },  
                  "point" : {
                    "$ref" : "#/components/schemas/ExchangeRateBuy/properties/point"
                  },       
                  "dollars" : {
                    "$ref" : "#/components/schemas/ExchangeRateBuy/properties/dollars"
                  }                                      
                }                
              }


            }
          }
        }
      },
      "BackstageExchangeRateArraySell" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "array",
              "items": {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "$ref" : "#/components/schemas/ExchangeRateSell/properties/id"
                  },               
                  "type" : {
                    "$ref" : "#/components/schemas/ExchangeRateSell/properties/type"
                  },  
                  "des" : {
                    "$ref" : "#/components/schemas/ExchangeRateSell/properties/des"
                  },                                       
                  "rate" : {
                    "$ref" : "#/components/schemas/ExchangeRateSell/properties/rate"
                  },  
                  "rangeUpper" : {
                    "$ref" : "#/components/schemas/ExchangeRateSell/properties/rangeUpper"
                  },       
                  "rangeLower" : {
                    "$ref" : "#/components/schemas/ExchangeRateSell/properties/rangeLower"
                  }                                      
                }                
              }
            }
          }
        }
      },      
      "TransactionSetting" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "firstReward" : {
                  "type": "integer"
                },  
                "atmHandlingFee" : {
                  "type": "integer"
                }, 
                "handlingFee" : {
                  "type": "integer"
                },                 
                "serviceFee" : {
                  "type": "integer"
                }                                              
              }                
            }
          }
        }
      },         
      "ReadManyPayManage" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "array",
              "items": {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },                    
                  "type" : {
                    "type" : "integer",
                    "description": "status map:\n * `1` - line pay\n * `2` - 街口支付\n",
                    "enum": [1, 2]
                  },            
                  "qrCode" : {
                    "type" : "string",
                    "default": ""
                  },  
                  "remark" : {
                    "type" : "string",
                    "default": ""
                  },     
                  "code" : {
                    "$ref" : "#/components/schemas/PayManage/properties/code"
                  },
                  "status" : {
                    "type" : "integer",
                    "default": 1,
                    "description" : "status map:\n * `1` - 未設定\n * `2` - 目前使用\n * `3` - 停用\n"
                  }
                }                
              }                  
            }
          }
        }
      },   
      "RealVerify" :{
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "array",
              "items": {
                "type" : "object",
                "properties" : {
                  "userStatus" : {
                    "type" : "integer"
                  },   
                  "name" : {
                    "type" : "string"
                  },         
                  "gameUid" : {
                    "type" : "string",
                    "nullable" : true
                  },      
                  "lineId" : {
                    "type" : "string",
                    "nullable" : true
                  },         
                  "birthdate" : {
                    "type" : "string"
                  },     
                  "country" : {
                    "type" : "string"
                  },       
                  "idCard" : {
                    "type" : "string"
                  },        
                  "idCardDate" : {
                    "type" : "string"
                  },             
                  "idCardPosiition" : {
                    "type" : "string"
                  },             
                  "idCardType" : {
                    "type" : "string"
                  },             
                  "city" : {
                    "type" : "string"
                  },             
                  "area" : {
                    "type" : "string"
                  },                                        
                  "address" : {
                    "type" : "string"
                  },               
                  "verify":{
                    "type": "object",
                    "properties": {
                      "name" : {
                        "type" : "integer"
                      },         
                      "gameUid" : {
                        "type" : "integer"
                      },      
                      "lineId" : {
                        "type" : "integer"
                      },         
                      "birthdate" : {
                        "type" : "integer"
                      },     
                      "country" : {
                        "type" : "integer"
                      },       
                      "idCardPhoto" : {
                        "type" : "integer"
                      },        
                      "idCardDate" : {
                        "type" : "integer"
                      },             
                      "idCardPosiition" : {
                        "type" : "integer"
                      },             
                      "idCardType" : {
                        "type" : "integer"
                      },             
                      "city" : {
                        "type" : "integer"
                      },             
                      "area" : {
                        "type" : "integer"
                      },                                        
                      "address" : {
                        "type" : "integer"
                      }      
                    }
                  }, 
                  "verifyDes":{
                    "type": "object",
                    "properties": {
                      "name" : {
                        "type" : "string"
                      },         
                      "gameUid" : {
                        "type" : "string"
                      },      
                      "lineId" : {
                        "type" : "string"
                      },               
                      "birthdate" : {
                        "type" : "string"
                      },     
                      "country" : {
                        "type" : "string"
                      },       
                      "idCardPhoto" : {
                        "type" : "string"
                      },        
                      "idCardDate" : {
                        "type" : "string"
                      },             
                      "idCardPosiition" : {
                        "type" : "string"
                      },             
                      "idCardType" : {
                        "type" : "string"
                      },             
                      "city" : {
                        "type" : "string"
                      },             
                      "area" : {
                        "type" : "string"
                      },                                        
                      "address" : {
                        "type" : "string"
                      }      
                    }
                  }
                }                
              }                  
            }
          }
        }   
      },
      "ResonDes" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "array",
              "items": {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer"
                  },     
                  "des" : {
                    "type" : "string"
                  }
                }                
              }                  
            }
          }
        }
      },   
      "AdminDetail" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "format": "uuid"
                },     
                "status" : {
                  "type" : "integer"
                }
              }                    
            }
          }
        }
      }, 
      "Token" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "token" : {
                  "type" : "string"
                }
              }                    
            }
          }
        }
      },                                
      "Unauthorized" : {
        "description" : "Unauthorized"
      },
      "Forbidden" : {
        "description" : "Forbidden"
      },
      "NotFound" : {
        "description" : "Not found"
      },
      "Conflict" : {
        "description" : "Conflict"
      },
      "BackstageUserTransaction" : {
        "description" : "Ok",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "array",
              "items": {
                "type" : "object",
                "properties" : {
                  "userStatus" : {
                    "type" : "integer"
                  },   
                  "name" : {
                    "type" : "string"
                  }
                }                
              }                  
            }
          }
        }   
      },     
      "PhoneNotFound" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 404
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1001
                },
                "message": {
                  "type": "string",
                  "example": "Phone not found"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "此電話未註冊"
                }                
              }                  
            }
          }
        }           
      },
      "VerificationCodeIncorrect" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 403
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1002
                },
                "message": {
                  "type": "string",
                  "example": "verification code incorrect"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "驗證碼錯誤"
                }      
                
              }                  
            }
          }
        }           
      },
      "CheckPasswordIncorrect" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 403
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1003
                },
                "message": {
                  "type": "string",
                  "example": "check password incorrect"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "兩次密碼不相符"
                }      
                
              }                  
            }
          }
        }           
      },
      "LoginFailed" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 403
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1004
                },
                "message": {
                  "type": "string",
                  "example": "Login failed"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "帳號或密碼錯誤"
                }      
                
              }                  
            }
          }
        }           
      },
      "CaptchaIncorrect" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 401
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1005
                },
                "message": {
                  "type": "string",
                  "example": "Captcha Incorrect"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "圖形驗證失敗"
                }      
                
              }                  
            }
          }
        }           
      },
      "RegisterReferralCode" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 401
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1006
                },
                "message": {
                  "type": "string",
                  "example": "Referral code no map to the user"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "此邀請碼未有對應使用者，請重新輸入或不輸入"
                }      
                
              }                  
            }
          }
        }           
      },
      "PhoneConfilct" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 409
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1007
                },
                "message": {
                  "type": "string",
                  "example": "Phone is confilct"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "電話號碼重複"
                }      
                
              }                  
            }
          }
        }           
      },
      "UserNotAuthorized" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 403
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1008
                },
                "message": {
                  "type": "string",
                  "example": "User is not authorized"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "使用者未經認證，請重新登入。"
                }      
                
              }                  
            }
          }
        }           
      },      
      "UserCookieExpired" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 401
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1009
                },
                "message": {
                  "type": "string",
                  "example": "cookies expired"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "認證過期請重新登入。"
                }      
                
              }                  
            }
          }
        }           
      },  
      "NotFoundGetRealVerify" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 404
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1010
                },
                "message": {
                  "type": "string",
                  "example": "Not found user real verify"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "沒有找到使用者認證資料。"
                }      
                
              }                  
            }
          }
        }           
      },   
      "NotFoundReadOneBackstageUser" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 404
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1011
                },
                "message": {
                  "type": "string",
                  "example": "Not found user"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "沒有找到使用者資料"
                }      
                
              }                  
            }
          }
        }           
      },  
      "NotFoundUserVerifyPhoto" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 404
                },   
                "code" : {
                  "type" : "integer",
                  "example": -1012
                },
                "message": {
                  "type": "string",
                  "example": "Not found user verify photo"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "找不到使用者圖片"
                }      
                
              }                  
            }
          }
        }           
      },                         
      "BankIdNotFound" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 404
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3001
                },
                "message": {
                  "type": "string",
                  "example": "Bank id not found"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "找不到使用銀行資料"
                }      
                
              }                  
            }
          }
        }           
      },
      "TransationUserIsNotAuthorized" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 403
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3002
                },
                "message": {
                  "type": "string",
                  "example": "User is not authorized"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "使用者尚未完成實名驗證，請完成驗證後再次操作。"
                }      
                
              }                  
            }
          }
        }           
      },
      "CreateTransationDollarsLessZero" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 400
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3003
                },
                "message": {
                  "type": "string",
                  "example": "Dollars or points less than zero."
                },
                "cnMsg": {
                  "type": "string",
                  "example": "該交易訂單的點數或金額小於或等於零。"
                }   
                
              }                  
            }
          }
        }           
      },
      "GsPayDepositError" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 400
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3004
                },
                "message": {
                  "type": "string",
                  "example": "Dollars or points less than zero."
                },
                "cnMsg": {
                  "type": "string",
                  "example": "第三方支付取號失敗。"
                }   
                
              }                  
            }
          }
        }           
      },
      "GsPayOrderNotFound" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 404
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3005
                },
                "message": {
                  "type": "string",
                  "example": "post gspay: order not found."
                },
                "cnMsg": {
                  "type": "string",
                  "example": "該交易單號與第三方支付訂單不匹配，請重新申請交易。"
                }   
              }                  
            }
          }
        }           
      },
      "TransactionQRCodeNotFound" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 404
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3006
                },
                "message": {
                  "type": "string",
                  "example": "Transaction QR Code Not Found"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "找不到付款QRcode。"
                }   
                
              }                  
            }
          }
        }           
      },
      "TransactionUpdateStateError" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 403
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3007
                },
                "message": {
                  "type": "string",
                  "example": "The user is not authorized to update the order."
                },
                "cnMsg": {
                  "type": "string",
                  "example": "該使用者無權限更新訂單狀態。"
                }   
                
              }                  
            }
          }
        }           
      },
      "TransactionUpdateStateTimeout" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 403
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3008
                },
                "message": {
                  "type": "string",
                  "example": "The order already timeout."
                },
                "cnMsg": {
                  "type": "string",
                  "example": "此訂單已經過期。"
                }   
                
              }                  
            }
          }
        }           
      },
      "TransactionUpdateStateAppeal" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 403
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3009
                },
                "message": {
                  "type": "string",
                  "example": "The order is appeal."
                },
                "cnMsg": {
                  "type": "string",
                  "example": "訂單申訴中。"
                }   
              }                  
            }
          }
        }           
      },
      "TransactionOrderNotFound" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 404
                },   
                "code" : {
                  "type" : "integer",
                  "example": -3010
                },
                "message": {
                  "type": "string",
                  "example": "Transaction order not found."
                },
                "cnMsg": {
                  "type": "string",
                  "example": "找不到該訂單"
                }   
                
              }                  
            }
          }
        }           
      },      
      "ServerError" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 500
                },   
                "code" : {
                  "type" : "integer",
                  "example": -4001
                },
                "message": {
                  "type": "string",
                  "example": "server error"
                },
                "cnMsg": {
                  "type": "string",
                  "example": "伺服器錯誤"
                }   
              }                  
            }
          }
        }           
      },
      "BadRequest" : {
        "description" : "error",
        "content" : {
          "application/json" : {
            "schema" : {
              "type": "object",
              "properties": {
                "status" : {
                  "type" : "integer",
                  "example": 400
                },   
                "code" : {
                  "type" : "integer",
                  "example": -4002
                },
                "message": {
                  "type": "string",
                  "example": "server error"
                },
                "detail": {
                  "type": "object",
                  "properties": {

                  }
                },
                "cnMsg": {
                  "type": "string",
                  "example": "參數錯誤"
                }   
              }                  
            }
          }
        }           
      }                                                                           
    },
    "securitySchemes" : {
      "cookieAuth" : {
        "type" : "apiKey",
        "name" : "JSESSIONID",
        "in" : "cookie"
      }
    }
  }
}